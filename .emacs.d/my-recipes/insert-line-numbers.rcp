;;; <http://emacswiki.org/emacs/NumberLines>.

(defun number-line (n padding)
  (beginning-of-line)
  (insert (number-to-string n))
  (let ((counter 0))
    (while (< counter padding)
      (insert " ")
      (setf counter (+ counter 1))))
  (forward-line))

(defun compute-padding (i n)
  (+ 1 (- (truncate (log10 n))
          (truncate (log10 i)))))

(defun number-lines (n)
  (interactive "p")
  (let ((counter 1))
    (while (<= counter n)
      (number-line counter (compute-padding counter n))
      (setf counter (+ counter 1)))))

(defun number-lines-region (start end)
  (interactive "r")
  (let ((num-lines (count-lines start end)))
    (save-excursion
      (save-restriction
        (narrow-to-region start end)
        (goto-char (point-min))
        (number-lines num-lines)))))

(defun unnumber-line (padding)
  (beginning-of-line)
  (re-search-forward "[0123456789]+" (get-end-line) t)
  (replace-match "" nil nil)
  (delete-char padding)
  (forward-line))

(defun unnumber-lines (n)
  (interactive "p")
  (let ((counter 1))
    (while (<= counter n)
      (unnumber-line (compute-padding counter n))
      (setf counter (+ counter 1)))))

(defun unnumber-lines-region (start end)
  (interactive "r")
  (let ((num-lines (count-lines start end)))
    (save-excursion
      (save-restriction
        (narrow-to-region start end)
        (goto-char (point-min))
        (unnumber-lines num-lines)))))
