(my-add-to-packages 'async)
(my-add-to-packages 'helm)
(my-after-init
  ;; (global-set-key (kbd "C-x b") 'helm-mini)
  ;; (global-set-key (kbd "M-x") 'helm-M-x)
  ;; (global-set-key (kbd "M-y") 'my-yank-pop-with-helm)
  (global-set-key (my-kbd "m h ? ? m") 'helm-man-woman)
  (global-set-key (my-kbd "m h f f") 'my-helm-find)
  (global-set-key (my-kbd "m h f g") 'helm-do-grep)
  (global-set-key (my-kbd "m h f l") 'helm-locate)
  (global-set-key (my-kbd "m h f o") 'helm-occur)
  (global-set-key (my-kbd "m h m r") 'helm-all-mark-rings)
  (global-set-key (my-kbd "m h r") 'helm-resume)

  (global-set-key (my-kbd "m h m") 'helm-mini)

  (custom-set-variables '(helm-always-two-windows t)) ;look like minibuffer

  ;; (my-eval-after-load 'helm
  ;;   (setq
  ;;    helm-move-to-line-cycle-in-source t ; move to end or beginning of source
  ;;    ))

  (defvar helm-map
    (let ((map (make-sparse-keymap)))
      (set-keymap-parent map minibuffer-local-map)
      (define-key map (kbd "<down>")     'helm-next-line)
      (define-key map (kbd "<up>")       'helm-previous-line)
      (define-key map (kbd "C-n")        'helm-next-line)
      (define-key map (kbd "C-p")        'helm-previous-line)
      (define-key map (kbd "<C-down>")   'helm-follow-action-forward)
      (define-key map (kbd "<C-up>")     'helm-follow-action-backward)
      (define-key map (kbd "<prior>")    'helm-previous-page)
      (define-key map (kbd "<next>")     'helm-next-page)
      (define-key map (kbd "M-v")        'helm-previous-page)
      (define-key map (kbd "C-v")        'helm-next-page)
      (define-key map (kbd "M-<")        'helm-beginning-of-buffer)
      (define-key map (kbd "M->")        'helm-end-of-buffer)
      (define-key map (kbd "C-g")        'helm-keyboard-quit)
      (define-key map (kbd "<right>")    'helm-next-source)
      (define-key map (kbd "<left>")     'helm-previous-source)
      (define-key map (kbd "<RET>")      'helm-maybe-exit-minibuffer)
      (define-key map (kbd "C-i")        'helm-select-action)
      (define-key map (kbd "C-z")        'helm-execute-persistent-action)
      (define-key map (kbd "C-j")        'helm-execute-persistent-action)
      (define-key map (kbd "C-o")        'helm-next-source)
      (define-key map (kbd "C-l")        'helm-recenter-top-bottom-other-window)
      (define-key map (kbd "M-C-l")      'helm-reposition-window-other-window)
      (define-key map (kbd "C-M-v")      'helm-scroll-other-window)
      (define-key map (kbd "M-<next>")   'helm-scroll-other-window)
      (define-key map (kbd "C-M-y")      'helm-scroll-other-window-down)
      (define-key map (kbd "C-M-S-v")    'helm-scroll-other-window-down)
      (define-key map (kbd "M-<prior>")  'helm-scroll-other-window-down)
      (define-key map (kbd "<C-M-down>") 'helm-scroll-other-window)
      (define-key map (kbd "<C-M-up>")   'helm-scroll-other-window-down)
      (define-key map (kbd "C-@")        'helm-toggle-visible-mark)
      (define-key map (kbd "C-SPC")      'helm-toggle-visible-mark)
      (define-key map (kbd "M-SPC")      'helm-toggle-visible-mark)
      (define-key map (kbd "M-[")        nil)
      (define-key map (kbd "M-(")        'helm-prev-visible-mark)
      (define-key map (kbd "M-)")        'helm-next-visible-mark)
      (define-key map (kbd "C-k")        'helm-delete-minibuffer-contents)
      (define-key map (kbd "C-x C-f")    'helm-quit-and-find-file)
      (define-key map (kbd "M-m")        'helm-toggle-all-marks)
      (define-key map (kbd "M-a")        'helm-mark-all)
      (define-key map (kbd "M-u")        'helm-unmark-all)
      (define-key map (kbd "C-w")        'helm-yank-text-at-point)
      (define-key map (kbd "C-M-a")      'helm-show-all-in-this-source-only)
      (define-key map (kbd "C-M-e")      'helm-display-all-sources)
      (define-key map (kbd "C-r")        'undefined)
      (define-key map (kbd "C-s")        'undefined)
      (define-key map (kbd "M-s")        'undefined)
      (define-key map (kbd "C-}")        'helm-narrow-window)
      (define-key map (kbd "C-{")        'helm-enlarge-window)
      (define-key map (kbd "C-c -")      'helm-swap-windows)
      (define-key map (kbd "C-c C-d")    'helm-delete-current-selection)
      (define-key map (kbd "C-c C-y")    'helm-yank-selection)
      (define-key map (kbd "C-c C-k")    'helm-kill-selection-and-quit)
      ;; (define-key map (kbd "C-c C-f")    'helm-follow-mode) ;break my prefix key!!!
      (define-key map (kbd "C-c C-u")    'helm-force-update)
      (define-key map (kbd "M-p")        'previous-history-element)
      (define-key map (kbd "M-n")        'next-history-element)
      (define-key map (kbd "C-!")        'helm-toggle-suspend-update)
      (define-key map (kbd "C-x b")      'helm-resume-previous-session-after-quit)
      (define-key map (kbd "C-x C-b")    'helm-resume-list-buffers-after-quit)
      ;; Disable usage of the mouse while in helm.
      (define-key map (kbd "<down-mouse-1>")   'ignore)
      (define-key map (kbd "<drag-mouse-1>")   'ignore)
      (define-key map (kbd "<mouse-1>")        'ignore)
      (define-key map (kbd "<double-mouse-1>") 'ignore)
      (define-key map (kbd "<triple-mouse-1>") 'ignore)
      (define-key map (kbd "<down-mouse-2>")   'ignore)
      (define-key map (kbd "<drag-mouse-2>")   'ignore)
      (define-key map (kbd "<mouse-2>")        'ignore)
      (define-key map (kbd "<double-mouse-2>") 'ignore)
      (define-key map (kbd "<triple-mouse-2>") 'ignore)
      (define-key map (kbd "<down-mouse-3>")   'ignore)
      (define-key map (kbd "<drag-mouse-3>")   'ignore)
      (define-key map (kbd "<mouse-3>")        'ignore)
      (define-key map (kbd "<double-mouse-3>") 'ignore)
      (define-key map (kbd "<triple-mouse-3>") 'ignore)
      ;; Disable `file-cache-minibuffer-complete'.
      (define-key map (kbd "<C-tab>")    'undefined)
      ;; Multi keys
      (define-key map (kbd "C-t")        'helm-toggle-resplit-and-swap-windows)
      ;; Debugging command
      (define-key map (kbd "C-h C-d")    'undefined)
      (define-key map (kbd "C-h C-d")    'helm-debug-output)
      ;; Use `describe-mode' key in `global-map'.
      (define-key map [f1] nil) ; Allow to eval keymap without errors.
      (define-key map (kbd "C-h C-h")    'undefined)
      (define-key map (kbd "C-h h")      'undefined)
      (cl-dolist (k (where-is-internal 'describe-mode global-map))
        (define-key map k 'helm-help))
      ;; Bind all actions from 1 to 12 to their corresponding nth index+1.
      (cl-loop for n from 0 to 12 do
               (define-key map (kbd (format "<f%s>" (1+ n)))
                 `(lambda ()
                    (interactive)
                    (helm-select-nth-action ,n))))
      map)
    "Keymap for helm.")

  ;; (helm-mode t)
  )

(defun my-yank-pop-with-helm (&optional arg)
  (interactive "P")
  (if arg
      (call-interactively 'helm-show-kill-ring)
    (call-interactively 'yank-pop)))

(defun my-helm-find ()
  (interactive)
  (setq current-prefix-arg '(4))
  (call-interactively 'helm-find))
