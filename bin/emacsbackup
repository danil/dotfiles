#!/bin/sh

# This file is part of Danil Kutkevich <danil@kutkevich.org> home.

USAGE="usage: ${CMD:=${0##*/}} --home=\"\$HOME\" [--emacs-d] [--emacs-var] [--emacs-d-cask]"

OPT_ALL=0

# Shell script options functions.
opttest () { { [ "$1" != "$EOL" ] && [ "$1" != '--' ]; } || optexit "missing argument" "$2"; } # avoid infinite loop
opthelp () { printf "%s\n" "$USAGE"; }
optexit () { printf >&2 "%s %s\n%s\n" "$1" "$2" "$USAGE"; exit 2; }

# Parse command-line options.
set -- "$@" "${EOL:=$(printf '\1\3\3\7')}"  # end-of-list marker
while [ "$1" != "$EOL" ]; do
    opt="$1"; shift

    case "$opt" in
        --emacs-d      ) OPT_EDOT=0; OPT_ALL=-1;;
        --emacs-var    ) OPT_EVAR=0; OPT_ALL=-1;;
        --emacs-d-cask ) OPT_ECAS=0; OPT_ALL=-1;;
        --clone        ) OPT_CLONE=0;;
        --home         ) opttest "$1" "$opt"; OPT_HOME="$1";;
        -h | --help    ) opthelp; exit 0;;

        # Process special cases.
        --) while [ "$1" != "$EOL" ]; do set -- "$@" "$1"; shift; done;;    # parse remaining as positional
        --[!=]*=*) set -- "${opt%%=*}" "${opt#*=}" "$@";;                   # "--opt=arg"  ->  "--opt" "arg"
        -[A-Za-z0-9] | -*[!A-Za-z0-9]*) optexit "unknown option:" "$opt";;  # anything invalid like '-*'
        -?*) other="${opt#-?}"; set -- "${opt%"$other"}" "-${other}" "$@";; # "-abc"  ->  "-a" "-bc"
        *) set -- "$@" "$opt";;                                             # positional, rotate to the end
    esac
done; shift

if [ -z "$OPT_HOME" ]; then
    printf >&2 "missing home directory\n"
    printf >&2 "%s\n" "$USAGE"
    exit 1
fi

LVL=13
FILETMPL=$(hostname | tr '[:lower:]' '[:upper:]')D$(date --utc +%Y%m%dT%H%M%SZ)

arcbak() {
    local opt="${1}"
    local dir="${2}"
    local src="${3}"
    local dst="${4}"
    local arg="${5}"

    [ "$opt" != 0 ] && [ "$OPT_ALL" != 0 ] && return

    printf 'Backuping %s into %s ...\n' "$OPT_HOME/$dir/$src" "$(pwd)/$dst";

    tar --directory="$OPT_HOME/$dir" --create --exclude-vcs $arg --file - "$src/" \
        | zstd -$LVL --threads=0 --force --compress --stdout \
        > "$dst" \
        || exit 1

    OPT_DRY=-1
}

if [ "$OPT_CLONE" = 0 ]; then
    arcbak "$OPT_EDOT" ".config" "emacs"       "emacsclone$FILETMPL.tar.zst"
else
    arcbak "$OPT_EDOT" ".config" "emacs"       "emacs$FILETMPL.tar.zst" "--exclude=emacs/.cask --exclude=emacs/var"
    arcbak "$OPT_EVAR" ".config" "emacs/var"   "emacs.var$FILETMPL.tar.zst"
    arcbak "$OPT_ECAS" ".config" "emacs/.cask" "emacs.d.cask$FILETMPL.tar.zst"
fi


# Dry run.
if [ "$OPT_DRY" = 0 ]; then
    printf "%s\n" "$USAGE"
    exit 1
fi
