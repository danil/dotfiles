#!/bin/bash
remove_command="aptitude remove"
install_command="aptitude install"
disable_command="systemctl disable"

# TODO: install ntp

# Common packages.
# install="$install inxi" # inxi --graphics <https://github.com/smxi/inxi>
# install="$install jp2a" # converts jpg to ascii
# install="$install linux-generic-hwe-20.04-edge" # linxu/kernel 5.11 for ubuntu 20.04 lteinstall="$install apache2-utils" # provides htpasswd utility is an nginx/apach basic authentication password generator
# install="$install makepasswd" # password generator
# install="$install protobuf-compiler" # version to old/outdated(
install="$install apt-transport-https" # required by custom ppa
install="$install bc" # used by bash prompt, console-based calculator utility
install="$install bind9-host+M" # automatic/dependency: dns/host lookup utility
install="$install curl"
install="$install dos2unix" # convert text file line endings between CRLF and LF
install="$install genius" # calculator
install="$install git"
install="$install goaccess" # analyze nginx/apache log in real-time
install="$install hping3" # a-la interactive ping https://github.com/antirez/hping
install="$install htop"
install="$install jq" # json console formater (used by emacs counsel-jq) <http://stedolan.github.io/jq/tutorial>, <http://stackoverflow.com/questions/352098/how-can-i-pretty-print-json#15231463>
install="$install libpci-dev libnl-3-dev libnl-genl-3-dev gettext libgettextpo-dev autopoint gettext libncurses5-dev libncursesw5-dev libtool-bin dh-autoreconf autoconf-archive pkg-config" # powertop diagnose power consumption https://github.com/fenrus75/powertop#build-dependencies
install="$install lm-sensors" # FIXME: is the cpu temperate by ls sensors used by plain status or by slstatus?
install="$install logrotate"
install="$install lynx" # html to plain text `curl https://your.tld/ | lynx --stdin --dump`
install="$install mailutils" # is an gnu mailutils, reads local mail, provides /usr/bin/mail
install="$install mlocate" # locate/updatedb
install="$install mosh" # ssh replacement
install="$install ncdu" # disk space usage is an baobab and gt5 replacement
install="$install net-tools" # ifconfig cli
install="$install nginx" disable="$disable nginx"
install="$install opensmtpd" # send mail via /usr/bin/sendmail and deliver local mail to /var/mail a-la exim replacement
install="$install openssh-server"
install="$install pigz" # parallel gzip for multi-processor, multi-core
install="$install pwgen" # password generator
install="$install syncthing" # dropbox replacement: deb https://apt.syncthing.net/ syncthing release
install="$install tig" # git interactive cli
install="$install tree" # displays an indented directory tree
install="$install uni2ascii" # to/from unicode and to/from percent-encoding converter `echo -ne '%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82' | ascii2uni -q -aJ | uni2ascii -q -aJ`
install="$install uuid-runtime" # generating uuid <https://github.com/karelzak/util-linux>, <https://serverfault.com/questions/103359/how-to-create-a-uuid-in-bash#103366>
install="$install vim" # neovim
install="$install whois"
install="$install zstd" # a-la gz/xz compression

# Tmux (os wide/from source).
# install="$install tmux" # os wide
install="$install byacc" # preventing compiltime dependency error: ./etc/ylwrap: line 175: yacc: command not found
install="$install pkg-config libevent-dev libncurses-dev" # compiltime dependencies

# Emacs.
# install="$install emacs-el" # find/navigate elisp function source code <https://unix.stackexchange.com/questions/73100/how-to-attach-elisp-function-source-code-in-emacs>
# install="$install emacs-nox"
install="$install aspell-en" # used by emacs auto complete
install="$install aspell-ru" # used by emacs auto complete
install="$install clang" # used by company-clang backend
install="$install emacs-el" # find/navigate elisp function source code <https://unix.stackexchange.com/questions/73100/how-to-attach-elisp-function-source-code-in-emacs>
install="$install emacs-nox"
install="$install shellcheck" # used by emacs flycheck

# # Basher is a bash/shell/functions package manager
# # <https://github.com/basherpm/basher>.
# install="$install bash"
# install="$install coreutils"

# Homebrew <https://docs.brew.sh/Homebrew-on-Linux>.
install="$install build-essential"
install="$install curl"
install="$install file"
install="$install git"

# K8s kubernetes.
install="$install kubectl" # `deb https://apt.kubernetes.io/ kubernetes-xenial main` <https://kubernetes.io/docs/tasks/tools/install-kubectl>
install="$install gnupg2" # required by kubectl
install="$install apt-transport-https ca-certificates curl"

# Docker
# <https://docs.docker.com/install/linux/docker-ce/ubuntu>.
install="$install docker-ce docker-ce-cli containerd.io" disable="$disable docker" # `curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - && sudo add-apt-repository "deb arch=amd64 https://download.docker.com/linux/ubuntu bionic stable"`
install="$install golang-docker-credential-helpers" # credential helper stores encrypted passwords in d-bus secret service instead of unencrypted password in plain file <https://docs.docker.com/engine/reference/commandline/login/#credentials-store>
install="$install apt-transport-https ca-certificates curl gnupg gnupg-agent lsb-release software-properties-common" # required by docker ppa <https://docs.docker.com/install/linux/docker-ce/ubuntu>

# The silver searcher (ag) <https://github.com/ggreer/the_silver_searcher>
# install="$install silversearcher-ag" # installing from source into ~/.local/bin
install="$install automake pkg-config libpcre3-dev zlib1g-dev liblzma-dev" # compiltime dependencies <https://github.com/ggreer/the_silver_searcher#building-from-source>

# C/C++ compile/make common dependencies.
install="$install automake" # required by tmux/xchainkeys
install="$install build-essential" # compiler?
install="$install devscripts" # ???
install="$install make" # required by all)
install="$install valgrind" # find memory leaks https://www.valgrind.org/docs/manual/quick-start.html

# PostgreSQL.
# install="$install pgcenter" # postgresql command-line tool https://github.com/lesovsky/pgcenter/releases install: dpkg --install path/to/pgcenter.deb
install="$install postgresql-14" disable="$disable postgresql" # `deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main` <https://www.postgresql.org/download/linux/ubuntu>
install="$install postgresql-server-dev-14" # required by pg_activity is an postgresql activity monitoring <https://github.com/dalibo/pg_activity>

# Mongodb.
install="$install mongodb-org" disable="$disable mongod" # latest stable version of the mongodb server
install="$install gnupg" # required by mongodb <https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu>

# Golang programming language.
# install="$install golang-race-detector-runtime" # FIXME: where is race detector for the go 1.15?
install="$install golang"
install="$install golang-1.17-doc golang-1.17-go golang-1.17-src"

# Rust programming language.
# install="$install libgtk-3-dev" # required by fontfinder https://github.com/mmstick/fontfinder
# install="$install libwebkit2gtk-4.0-dev" # required by fontfinder https://github.com/mmstick/fontfinder
install="$install libudev-dev" # required by fclones, is an duplicate file finder https://github.com/pkolaczk/fclones
install="$install libxcb-composite0-dev" # required by gitui a-la tig https://github.com/extrawurst/gitui

# Dart <https://dart.dev/get-dart#install-using-apt-get>.
install="$install apt-transport-https"
install="$install dart"

# Ruby programming language.
# install="$install libssl1.0-dev" # required by ruby 2.3.7 (libssl1.0-dev conflicts with libssl-dev)
install="$install libreadline-dev" # required by ruby 2.6.3
install="$install libsqlite3-dev" # required by sqlite3 which required by mailcatcher
install="$install libssl-dev" # required by ruby 2.6.3 (libssl-dev conflicts with libssl1.0-dev)

# Python programming language.
# install="$install python-pip" # python 2 pip no longer supported by ubuntu
install="$install python3-pip"

# Nodejs/Javascript by nodesource.com's ppa
# https://github.com/nodesource/distributions/blob/master/README.md#installation-instructions>
install="$install nodejs"
install="$install curl dirmngr apt-transport-https lsb-release ca-certificates" # required by nodesource.com's ppa

# # Benchmarks a-la `ab`.
# install="$install bonnie++"
# install="$install apache2-utils"
# install="$install dbench"
# install="$install siege"
# install="$install sysbench" # cpu and memory benchmarks
# install="$install tiobench" # TODO: find this package
# install="$install wrk" # c http benchmark tool <https://github.com/wg/wrk>

# X11/xorg/desktop.
# install="$install font-manager" # list bitmap ??? fonts
# install="$install fonts-fantasque-sans" # instead install manually into /usr/local/share/fonts # terminal/code/mono/programming font (gnome-terminal issue https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=960629)
# install="$install fonts-hack-ttf" # instead install manually into /usr/local/share/fonts # terminal/code/mono/programming font
# install="$install fonts-noto" # awesome serif font ???
# install="$install pk-update-icon" # FIXME: missing? # display notifications about software updates
# install="$install uswsusp" # FIXME: missing? # systemctl hibernate
# install="$install xcalib" # returns: "Error - unsupported ramp size 0" (load icc/icm display color profiles (only calibration curves) <https://wiki.archlinux.org/index.php/ICC_Profiles#xcalib>)
# install="$install xclip" # tmux and xorg clipboard integration <https://github.com/tmux-plugins/tmux-yank#linux-requirements>
# remove="$remove xserver-xorg-video-intel" # instead of intel using modesetting <https://bugs.launchpad.net/ubuntu/+source/xserver-xorg-video-intel/+bug/1867668>
install="$install argyll" # load icc/icm display color profiles <https://wiki.archlinux.org/index.php/ICC_Profiles#Argyll_CMS>
install="$install blueman" # full featured bluetooth manager gui <https://wiki.archlinux.org/title/Blueman>, <https://wiki.archlinux.org/title/Bluetooth>
install="$install duplicity" # backuping
install="$install feh" # command line image viewer
install="$install firefox" # works normal with graylog's text box (input box), text field (input field)
install="$install gimp" # a-la photoshop
install="$install gparted" # format/create partition/disk/usb
install="$install libnotify-bin" # a-la notify-osd
install="$install light" # used by xchainkeys and ~/.xprofile
install="$install lxappearance" # change/switch gtk2/gtk3 themes
install="$install maim" # takes screenshots of desktop
install="$install meld" # gnome diff (gtk)
install="$install mesa-utils" # provides glxgears util for the 3d compositor testing
install="$install mousepad" # simple text editor for xfce <https://github.com/codebrainz/mousepad>
install="$install mpv" # a-la mplayer replacement
install="$install ubuntu-restricted-extras" # playing video in browser instead of download <https://askubuntu.com/questions/1122579/firefox-downloads-the-video-instead-of-playing-it#1122668>, <https://askubuntu.com/questions/56446/how-do-i-install-the-ubuntu-restricted-extras-package#56448>
install="$install xsel" # copy selection in termina to the xorg clipboard (used by emacs and urxvt) <https://wiki.archlinux.org/index.php/rxvt-unicode#Automatic_Script_Management>
install="$install xserver-xorg-video-intel" # instead of modesetting using intel <https://bugs.launchpad.net/ubuntu/+source/xserver-xorg-video-intel/+bug/1867668>
install="$install xterm" # backup/fallback terminal additional to the st/stterm/alacritty

# C/C++ compile/make X11 dependencies.
install="$install libx11-dev" # ???
install="$install libxft-dev" # ???

# Invert colors on x11/xorg/xrandr
# <https://superuser.com/questions/208746/invert-colors-on-x-or-xfce4#1494872#209083>.
install="$install libxcb-randr0-dev"
install="$install xcalib" # `xcalib -i -a` invert colors on xorg/xrandr <https://superuser.com/questions/208746/invert-colors-on-x-or-xfce4#1494872#209083>

# Dunst/dunstify (respects org.freedesktop.Notifications)
# <https://github.com/dunst-project/dunst>
# install="$install libc6 libcairo2 libgdk-pixbuf2.0-0 libglib2.0-0 libpango-1.0-0 libpangocairo-1.0-0 libx11-6 libxdg-basedir1 libxinerama1 libxrandr2 libxss1" # runtime dependencies
# install="$install dunst" # instead compilling from source into ~/.local/bin # a-la notify-osd
install="$install libdbus-1-dev libnotify-dev libxrandr-dev libpango1.0-dev libx11-dev libxinerama-dev libxss-dev libglib2.0-dev libgtk-3-dev libxdg-basedir-dev" # compiltime dependencies <https://github.com/dunst-project/dunst/wiki/Dependencies>

# Alacritty terminal emulator a-la st/xterm
# <https://github.com/alacritty/alacritty/blob/master/INSTALL.md#debianubuntu>.
install="$install cmake"
install="$install libfontconfig1-dev"
install="$install libfreetype6-dev"
install="$install libxcb-xfixes0-dev"
install="$install libxkbcommon-dev"
install="$install pkg-config"
install="$install python3"

# i3.
# install="$install i3status" # instead using i3blocks
# install="$install libwnck-3-dev libxklavier-dev libgtk-3-dev dh-autoreconf dh-make devscripts fakeroot" # gxkb compiltime dependencies, is a keyboard/language layout indicator (flag) for tray <https://github.com/zen-tools/gxkb#building-from-source>, a-la xxkbinstall="$install build-essential" # dmenu (suckless) dependency
install="$install i3-wm"
install="$install i3lock" # xscreensaver replacement
install="$install libxcb-ewmh-dev libxcb-icccm4-dev libxcb-util0-dev" # xtitle (used by i3blocks/i3) compiltime dependencies <https://github.com/baskerville/xtitle>
install="$install volumeicon-alsa" # sound/volume icon indicator <https://github.com/Maato/volumeicon>
install="$install xautolock" # used by i3lock
install="$install libxpm-dev libxt-dev xutils-dev" # xxkb compiltime dependencies, is a keyboard/language layout indicator (flag) for tray <https://github.com/scientistnik/xxkb>, a-la gxkb which destroys xchainkeys

# # Suckless dwm.
# # install="$install gxkb" # a-la xxkb (destroy xchainkeys)
# # install="$install rofi" # a-la dmenu for open windows
# # install="$install xfdashboard" # a-la compiz expose/gnome overview (works only with running xfce session)
# # install="$install stterm" # instead compiling from source into ~/.local/bin # succless st terminal
# # install="$install volumeicon-alsa" # instead using i3 (i3status) # sound/volume icon indicator <https://github.com/Maato/volumeicon>
# install="$install build-essential" # suckless dependency
# install="$install i3lock" # xscreensaver replacement
# install="$install libx11-dev" # suckless dependency
# install="$install libxinerama-dev" # suckless dependency
# install="$install sharutils" # suckless dependency
# install="$install suckless-tools" # provides dmenu, slock and more
# install="$install xautolock" # used by i3lock
# install="$install xxkb" # keyboard/language layout indicator (flag) for tray

# Vault (hashicorp) <https://vaultproject.io/downloads>.
install="$install vault" # curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add - && sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"

# Xfce4.
# install="$install xfdashboard" # overview all windows
# install="$install xfce4"
# install="$install xfce4-notifyd" # notifications daemon (used by dwm)
# install="$install thunar-megasync" # not using
install="$install ristretto" # command line image viewer
install="$install thunar" # file manager
install="$install thunar-archive-plugin"
install="$install thunar-dropbox-plugin"
install="$install thunar-volman"

# mkusb <https://help.ubuntu.com/community/mkusb#Installation>.
install="$install mkusb usb-pack-efi" # create bootable usb/iso <https://help.ubuntu.com/community/mkusb#Quick_start_manual_and_mkusb_PPA>

# Dropbox.
install="$install dropbox"

# Slack.
install="$install libappindicator3-1" # slack dependency

# Gnome.
# install="$install chrome-gnome-shell" # chrome/gnome extension integration
# install="$install gnome-shell-extension-appindicator-" remove
# install="$install gnome-shell-extension-impatience" # speed up the gnome-shell animation speed
# install="$install gnome-shell-extension-move-clock" # move clock extension for GNOME shell
# install="$install gnome-shell-extension-ubuntu-dock-" # remove
# install="$install ubuntu-desktop-" # remove
install="$install atril" # pdf viewer remembers last page https://github.com/mate-desktop/atril
install="$install evince-" # remove: pdf viewer remembers last page https://github.com/mate-desktop/atril
install="$install gnome-tweaks" # former gnome-tweak-tool (in addition to gnome-control-center)

# Zoom dependencies
install="$install libegl1-mesa"
install="$install libglib2.0-0"
install="$install libgstreamer-plugins-base1.0-0"
install="$install libxcb-shape0"
install="$install libxcb-shm0"
install="$install libxcb-xfixes0"
install="$install libxcb-randr0"
install="$install libxcb-image0"
install="$install libfontconfig1"
install="$install libgl1-mesa-glx"
install="$install libxi6"
install="$install libsm6"
install="$install libxrender1"
install="$install libpulse0"
install="$install libxcomposite1"
install="$install libxslt1.1"
install="$install libsqlite3-0"
install="$install libxcb-keysyms1"
install="$install libxcb-xtest0"

# # Elasticsearch <https://www.elastic.co/guide/en/elasticsearch/reference/current/deb.html>.
# install="$install elasticsearch" # felix `deb https://artifacts.elastic.co/packages/5.x/apt stable main` elasticsearch 5 <https://www.elastic.co/guide/en/elasticsearch/reference/current/deb.html>, # apt-transport-https required by elasticsearch ppa <https://www.elastic.co/guide/en/elasticsearch/reference/current/deb.html#deb-repo>
# install="$install apt-transport-https"

# # never used Skippy-XD is an full-screen task-switcher for X11
# # <https://github.com/richardgv/skippy-xd>
# install="$install libimlib2-dev"
# install="$install libfontconfig1-dev"
# install="$install libfreetype6-dev"
# install="$install libx11-dev"
# install="$install libxext-dev"
# install="$install libxft-dev"
# install="$install libxrender-dev"
# install="$install zlib1g-dev"
# install="$install libxinerama-dev"
# install="$install libxcomposite-dev"
# install="$install libxdamage-dev"
# install="$install libxfixes-dev"
# install="$install libxmu-dev"

# Google chrome <https://www.google.com/chrome>.
install="$install apt-transport-https"
install="$install google-chrome-stable"

# # never used Brave browser a-la google chrome <https://github.com/brave>.
# install="$install apt-transport-https"
# install="$install brave-browser" # a-la google chrome
# install="$install curl"
# install="$install gnupg"

# Employer Ozon.
install="$install docker-ce" disable="docker" # `curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - && sudo add-apt-repository "deb arch=amd64 https://download.docker.com/linux/ubuntu bionic stable"`
install="$install golang"
install="$install libpcap-dev" # required by github.com/google/gopacket/pcap (go/src/github.com/google/gopacket/pcap/pcap_unix.go:34:10: fatal error: pcap.h: No such file or directory)
install="$install libqt5webkit5" # GlobalProtect_UI_deb-5.2.6.0-18.deb VPN dependency
install="$install libxml2-utils" # provides xmllint
install="$install openvpn" disable="$disable systemctl disable openvpn openvpn@client" # openvpn client <https://confluence.ozon.ru/pages/viewpage.action?spaceKey=CORPIT&title=OpenVPN+for+Linux>
install="$install redis" disable="$disable systemctl disable redis-server"

# # Employer Rocketbank.
# # install="$install glide" # german does not use glide # go/german `add-apt-repository ppa:masterminds/glide` golang glide vendor package management <https://github.com/Masterminds/glide>
# install="$install docker-ce" disable="$disable systemctl disable docker" # `curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - && sudo add-apt-repository "deb arch=amd64 https://download.docker.com/linux/ubuntu bionic stable"`
# install="$install elasticsearch apt-transport-https" # felix `deb https://artifacts.elastic.co/packages/5.x/apt stable main` elasticsearch 5 <https://www.elastic.co/guide/en/elasticsearch/reference/current/deb.html>, # apt-transport-https required by elasticsearch ppa <https://www.elastic.co/guide/en/elasticsearch/reference/current/deb.html#deb-repo>
# install="$install golang"
# install="$install libmagickwand-dev" # required by rmagick by felix
# install="$install libpcap-dev" # required by github.com/google/gopacket/pcap (go/src/github.com/google/gopacket/pcap/pcap_unix.go:34:10: fatal error: pcap.h: No such file or directory)
# install="$install network-manager-vpnc-gnome" # cisco vpn client plugin for the gnome
# install="$install openconnect" # vpnc/globalprotect compatible, ppa: <https://launchpad.net/~phusen/+archive/ubuntu/openconnect>
# install="$install openvpn" # openvpn client
# # install="$install postgresql-11" disable="$disable systemctl disable postgresql-11" # `deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main` <https://www.postgresql.org/download/linux/ubuntu>
# # install="$install postgresql-9.6" disable="$disable systemctl disable postgresql-9.6"  # felix `deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main` <https://www.postgresql.org/download/linux/ubuntu>
# install="$install redis" disable="$disable systemctl disable redis-server" # felix
# install="$install vpnc" # cisco vpn client
# # install="$install yarn" # (NOTE: before add ppa!) js package manager required by rails asset pipeline precompilation (before install add ppa <https://yarnpkg.com/lang/en/docs/install/#debian-stable>)

$remove_command  $remove  || exit 1
$install_command $install || exit 1
$disable_command $disable || exit 1
