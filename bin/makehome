#!/bin/sh

# This file is part of Danil Kutkevich <danil@kutkevich.org> home.

USAGE="usage: ${CMD:=${0##*/}} [--apt] [--brew] [--update] [--etc] [--root] [--home]"

# APT (deb/dpkg/apt-get/aptitude)
# <https://en.wikipedia.org/wiki/APT_(software)>.
APTO_ADD_CLI="aptitude install --without-recommends"
APTO_REM_CLI="aptitude remove"
# APTO_DIS_CLI="systemctl disable"

# Homebrew
# <https://brew.sh>.
BREW_ADD_SRC_CLI="brew tap"
BREW_REM_SRC_CLI="brew untap"
BREW_ADD_CLI="brew install"

# AppImage
# <https://github.com/appimage/appimagekit>.
APPI_ADD_CLI="appman -i"

# Flatpak
# <https://github.com/flatpak/flatpak>.
FLAT_ADD_CLI="flatpak install --verbose flathub"

# Rust Cargo
# <https://github.com/rust-lang/cargo>,
# <https://doc.rust-lang.org/cargo>.
RUST_ADD_CLI="cargo install"
RUST_UPD_CLI="cargo install --force"

OPT_ALL=-1
OPT_JOBS=`grep -c ^processor /proc/cpuinfo` OPT_JOBS=${OPT_JOBS:-1}

# Options functions.
optexit () { printf >&2 "%s %s\n%s\n" "$1" "$2" "$USAGE"; exit 2; }
optcheck () { { [ "$1" != "$EOL" ] && [ "$1" != '--' ]; } || optexit "missing argument" "$2"; } # avoid infinite loop
opthelp () { printf "%s\n" "$USAGE"; }

# Parse command-line options.
set -- "$@" "${EOL:=$(printf '\1\3\3\7')}"  # end-of-list marker
while [ "$1" != "$EOL" ]; do
    opt="$1"; shift

    case "$opt" in
        --apt          ) OPT_DPKG=0; OPT_ALL=-1;;
        --brew         ) OPT_BREW=0; OPT_ALL=-1;;
        --appimage     ) OPT_APPI=0; OPT_ALL=-1;;
        --flatpak      ) OPT_FLAT=0; OPT_ALL=-1;;
        --rust         ) OPT_RUST=0; OPT_ALL=-1;;
        --home         ) optcheck "$1" "$opt"; OPT_HOME="$1"; OPT_ALL=-1;;
        --etc          ) OPT_ETCE=0; OPT_ALL=-1;;
        --root         ) OPT_ROOT=0; OPT_ALL=-1;;
        --jobs         ) optcheck "$1" "$opt"; OPT_JOBS="$1"; shift;;
        --update       ) OPT_UPDATE=0;;
        -v | --verbose ) OPT_VERBOSE=0;;
        -h | --help    ) opthelp; exit 0;;

        # Process special cases.
        --) while [ "$1" != "$EOL" ]; do set -- "$@" "$1"; shift; done;;   # parse remaining as positional
        --[!=]*=*) set -- "${opt%%=*}" "${opt#*=}" "$@";;                  # "--opt=arg"  ->  "--opt" "arg"
        -[A-Za-z0-9] | -*[!A-Za-z0-9]*) optexit "unknown option:" "$opt";; # anything invalid like '-*'
        -?*) other="${opt#-?}"; set -- "${opt%$other}" "-${other}" "$@";;  # "-abc"  ->  "-a" "-bc"
        *) set -- "$@" "$opt";;                                            # positional, rotate to the end
    esac
done; shift

# TODO: install ntp

# TODO: investigate homebrew packages
# cask
# httpie
# kubernetes-cli
# leiningen
# md5sha1sum
# p7zip 7-Zip
# perl
# pwgen
# rabbitmq
# ripgrep
# shellcheck
# sqlite
# the_silver_searcher

# Common packages.
# BREW_ADD="$BREW_ADD bash-completion" # programmable completion # conflicts with util-linux
# BREW_ADD="$BREW_ADD bc" # used by bash prompt, console-based calculator utility
# BREW_ADD="$BREW_ADD goaccess" # analyze apache/nginx log in real-time
# BREW_ADD="$BREW_ADD grpc" # ?????????? gRPC client a-la curl https://github.com/grpc/grpc/blob/master/doc/command_line_tool.md
# BREW_ADD="$BREW_ADD hping" # hping3 a-la interactive ping <https://github.com/antirez/hping> # APTO_ADD="$APTO_ADD hping3" # a-la interactive ping https://github.com/antirez/hping
# BREW_ADD="$BREW_ADD pigz" # APTO_ADD="$APTO_ADD pigz" # parallel gzip for multi-processor, multi-core
# APTO_ADD="$APTO_ADD inxi" # inxi --graphics <https://github.com/smxi/inxi>
# APTO_ADD="$APTO_ADD jp2a" # converts jpg to ascii
# APTO_ADD="$APTO_ADD linux-generic-hwe-20.04-edge" # linxu/kernel 5.11 for ubuntu 20.04
# APTO_ADD="$APTO_ADD makepasswd" # password generator
# APTO_ADD="$APTO_ADD protobuf-compiler" # version to old/outdated(
# RUST_ADD="$RUST_ADD czkawka_cli" # find duplicates, empty folders
# RUST_ADD="$RUST_ADD ddh" # duplicate file finder https://github.com/darakian/ddh
# RUST_ADD="$RUST_ADD exa" # list files/directories, is an ls replacement https://github.com/ogham/exa
# RUST_ADD="$RUST_ADD fclones" # duplicate file finder https://github.com/pkolaczk/fclones
# RUST_ADD="$RUST_ADD fselect" # find files with sql-like queries https://github.com/jhspetersson/fselect
# RUST_ADD="$RUST_ADD xsv" # csv cli (indexing, slicing, analyzing, splitting and joining) <https://github.com/BurntSushi/xsv>
BREW_ADD="$BREW_ADD ack" # a-la ag <https://github.com/beyondgrep/ack3>
BREW_ADD="$BREW_ADD bash" # Bourne again shell <https://gnu.org/software/bash>
BREW_ADD="$BREW_ADD clib" # package manager for c program language libraries <https://github.com/clibs/clib>
BREW_ADD="$BREW_ADD colordiff" # colorize diff output <https://github.com/daveewart/colordiff>
BREW_ADD="$BREW_ADD convmv" # a-la iconv character encoding conversion util # APTO_ADD="$APTO_ADD convmv" # a-la iconv character encoding conversion util
BREW_ADD="$BREW_ADD csvkit" # conver csv to json `csvjson path/to/file.csv` <https://github.com/wireservice/csvkit/blob/master/docs/scripts/csvjson.rst>
BREW_ADD="$BREW_ADD curl" # a-la wget <https://github.com/curl/curl> # APTO_ADD="$APTO_ADD curl" # a-la wget <https://github.com/curl/curl>
BREW_ADD="$BREW_ADD dos2unix" # convert text file line endings between CRLF and LF # APTO_ADD="$APTO_ADD dos2unix" # convert text file line endings between CRLF and LF
BREW_ADD="$BREW_ADD fd" # RUST_ADD="$RUST_ADD fd-find" # find replacement https://github.com/sharkdp/fd
BREW_ADD="$BREW_ADD flatbuffers" # a-la protobuf <https://github.com/google/flatbuffers>
BREW_ADD="$BREW_ADD jsonnet" # https://github.com/google/jsonnet
BREW_ADD="$BREW_ADD mailutils" # APTO_ADD="$APTO_ADD mailutils" # is an gnu mailutils, reads local mail, provides /usr/bin/mail
BREW_ADD="$BREW_ADD ninja" # a-la make build automation system
BREW_ADD="$BREW_ADD pwgen" # APTO_ADD="$APTO_ADD pwgen" # password generator
BREW_ADD="$BREW_ADD ripgrep" # RUST_ADD="$RUST_ADD ripgrep" # rg is a search tool a-la ag (silver searcher) <https://github.com/burntsushi/ripgrep>
BREW_ADD="$BREW_ADD the_platinum_searcher" # pt a-la ag <https://github.com/monochromegane/the_platinum_searcher>
BREW_ADD="$BREW_ADD the_silver_searcher" # APTO_ADD="$APTO_ADD silversearcher-ag" # the silver searcher (ag) is a code-searching tool a-la ack <https://github.com/ggreer/the_silver_searcher> # APTO_ADD="$APTO_ADD automake pkg-config libpcre3-dev zlib1g-dev liblzma-dev" # compiltime dependency <https://github.com/ggreer/the_silver_searcher#building-from-source>
BREW_ADD="$BREW_ADD tree" # APTO_ADD="$APTO_ADD tree" # displays an indented directory tree
BREW_ADD="$BREW_ADD uni2ascii" # APTO_ADD="$APTO_ADD uni2ascii" # to/from unicode and to/from percent-encoding converter `echo -ne '%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82' | ascii2uni -q -aJ | uni2ascii -q -aJ`
BREW_ADD="$BREW_ADD util-linux" # APTO_ADD="$APTO_ADD uuid-runtime" # APTO_ADD="$APTO_ADD whois" # provides uuidgen (uuid generator) also provides uni2ascii (to/from unicode and to/from percent-encoding converter `echo -ne '%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82' | ascii2uni -q -aJ | uni2ascii -q -aJ`) <https://github.com/util-linux/util-linux> , <https://serverfault.com/questions/103359/how-to-create-a-uuid-in-bash#103366>
BREW_ADD="$BREW_ADD wdiff" # diff wordwise/word per word basis (a word is anything between whitespace)
APTO_ADD="$APTO_ADD apt-transport-https" # required by custom ppa
APTO_ADD="$APTO_ADD bc" # used by bash prompt, console-based calculator utility
APTO_ADD="$APTO_ADD bind9-host" # automatic/dependency: dns/host lookup utility
APTO_ADD="$APTO_ADD genius" # calculator
APTO_ADD="$APTO_ADD libpci-dev libnl-3-dev libnl-genl-3-dev gettext libgettextpo-dev autopoint gettext libncurses5-dev libncursesw5-dev libtool-bin dh-autoreconf autoconf-archive pkg-config" # powertop diagnose power consumption https://github.com/fenrus75/powertop#build-dependencies
APTO_ADD="$APTO_ADD lm-sensors" # FIXME: is the cpu temperate by ls sensors used by plain status or by slstatus?
APTO_ADD="$APTO_ADD logrotate"
APTO_ADD="$APTO_ADD lynx" # html to plain text `curl https://your.tld/ | lynx --stdin --dump`
APTO_ADD="$APTO_ADD mlocate" # locate/updatedb
APTO_ADD="$APTO_ADD net-tools" # ifconfig cli
APTO_ADD="$APTO_ADD opensmtpd" # send mail via /usr/bin/sendmail and deliver local mail to /var/mail a-la exim replacement
APTO_ADD="$APTO_ADD openssh-server"
RUST_ADD="$RUST_ADD cpc" # cli calculator/units converter https://github.com/probablykasper/cpc

# Data compression algorithms.
BREW_ADD="$BREW_ADD lz4" # a-la gz/xz compression, required by gnupg, ffmpeg and mpv
BREW_ADD="$BREW_ADD snappy" # a-la gz/xz compression, required by ffmpeg and mpv
BREW_ADD="$BREW_ADD zstd" # a-la gz/xz compression, required by gcc, curl, git, gnupg, rust, node, ffmpeg, mpv and feh
APTO_ADD="$APTO_ADD zstd" # a-la gz/xz compression

# Network.
BREW_ADD="$BREW_ADD aria2" # `aria2c https://your.tld/path/to/your.file` download client a-la curl/wget
BREW_ADD="$BREW_ADD awscli" # `aws --version` # s3 command line client # default amazon aws ec2 client <https://github.com/aws/aws-cli>.
BREW_ADD="$BREW_ADD axel" # download client a-la curl/wget
BREW_ADD="$BREW_ADD freerdp" # xfreerdp is a remote desktop protocol for win https://github.com/freerdp/freerdp
BREW_ADD="$BREW_ADD gmailctl" # gmail filters generation
BREW_ADD="$BREW_ADD grpcurl" # gRPC client a-la curl https://github.com/fullstorydev/grpcurl
BREW_ADD="$BREW_ADD lftp" # APTO_ADD="$APTO_ADD lftp" # ftp client <https://github.com/lavv17/lftp>
BREW_ADD="$BREW_ADD mosh" # APTO_ADD="$APTO_ADD mosh" # ssh replacement <https://github.com/mobile-shell/mosh>
BREW_ADD="$BREW_ADD syncthing" # APTO_ADD="$APTO_ADD syncthing" # dropbox replacement: deb <https://apt.syncthing.net> syncthing release
BREW_ADD="$BREW_ADD wget" # a-la curl
BREW_ADD="$BREW_ADD whois"

# Git.
# RUST_ADD="$RUST_ADD gitui" # git tui, is an tig replacement https://github.com/extrawurst/gitui
BREW_ADD="$BREW_ADD git" # distributed version/revision control system <https://github.com/git/git> # APTO_ADD="$APTO_ADD git"
BREW_ADD="$BREW_ADD git-flow" # <https://github.com/nvie/gitflow>
BREW_ADD="$BREW_ADD git-lfs" # <https://git-lfs.com>
BREW_ADD="$BREW_ADD tig" # APTO_ADD="$APTO_ADD tig" # git interactive client

# *nix shell/terminal emulator/multiplexer.
# BREW_ADD="$BREW_ADD nnn" # terminal file manager a-la mc/midnight commander https://github.com/jarun/nnn
# RUST_ADD="$RUST_ADD bat" # print file lines with syntax highlighting, is an cat replacement
# RUST_ADD="$RUST_ADD racer" # compilation failing all the time <https://github.com/racer-rust/racer/issues/868#issuecomment-459017685>, rust code completion https://github.com/phildawes/racer
APTO_ADD="$APTO_ADD cmake libfontconfig1-dev libfreetype6-dev libxcb-xfixes0-dev libxkbcommon-dev pkg-config" # alacritty dependency, alacritty is a terminal emulator a-la st/xterm <https://github.com/alacritty/alacritty/blob/master/INSTALL.md#debianubuntu>
APTO_ADD="$APTO_ADD xterm" # backup/fallback terminal additional to the st/stterm/alacritty
BREW_ADD="$BREW_ADD fish" # fish shell a-la bash
BREW_ADD="$BREW_ADD nushell" # <https://github.com/nushell/nushell>
BREW_ADD="$BREW_ADD tmux" # terminal multiplexer a-la gnu screen # APTO_ADD="$APTO_ADD pkg-config libevent-dev libncurses-dev" # os wide/from source compiltime dependency # APTO_ADD="$APTO_ADD byacc" # also byacc: preventing compiltime dependency error: ./etc/ylwrap: line 175: yacc: command not found
BREW_ADD="$BREW_ADD wezterm" BREW_ADD_SRC="$BREW_ADD_SRC wez/wezterm-linuxbrew" # APPI_ADD="$APPI_ADD wezterm" # gpu-accelerated cross-platform terminal and multiplexer written in rust <https://github.com/wez/wezterm>
BREW_ADD="$BREW_ADD xsel" # APTO_ADD="$APTO_ADD xsel" # copy selection in termina to the xorg clipboard (used by emacs and urxvt) <https://wiki.archlinux.org/index.php/rxvt-unicode#Automatic_Script_Management>
RUST_ADD="$RUST_ADD alacritty" # terminal/console emulator a-la st/xterm https://github.com/alacritty/alacritty

# Vim.
BREW_ADD="$BREW_ADD fzf" # fuzzy finder https://github.com/junegunn/fzf
BREW_ADD="$BREW_ADD fzy" # fuzzy finder https://github.com/jhawthorn/fzy
BREW_ADD="$BREW_ADD pick" # fuzzy finder https://github.com/mptre/pick
BREW_ADD="$BREW_ADD sk" # fuzzy finder https://github.com/lotabout/skim
BREW_ADD="$BREW_ADD vim" # APTO_ADD="$APTO_ADD vim" # vim is awesome a-la emacs, neovim is sucks <https://github.com/vim/vim>

# Emacs <https://github.com/emacs-mirror/emacs>.
# BREW_ADD="$BREW_ADD emacs" # APTO_ADD="$APTO_ADD emacs-nox" # instead compiled from source into ~/.local/usr/local/bin # TODO: maybe use homebrew?
# APTO_ADD="$APTO_ADD libgif-dev" # compiltime dependency X11 <https://www.emacswiki.org/emacs/BuildingEmacs#h5o-4>
BREW_ADD="$BREW_ADD fdupes" # identify or delete duplicate files https://github.com/adrianlopezroche/fdupes (used by emacs package https://github.com/ShuguangSun/find-dupes-dired)
BREW_ADD="$BREW_ADD jq" # json console formater (used by emacs counsel-jq) <http://stedolan.github.io/jq/tutorial>, <http://stackoverflow.com/questions/352098/how-can-i-pretty-print-json#15231463> # APTO_ADD="$APTO_ADD jq" # json console formater (used by emacs counsel-jq) <http://stedolan.github.io/jq/tutorial>, <http://stackoverflow.com/questions/352098/how-can-i-pretty-print-json#15231463>
BREW_ADD="$BREW_ADD markdownlint-cli" # used/required used by emacs flycheck
BREW_ADD="$BREW_ADD shellcheck" # APTO_ADD="$APTO_ADD shellcheck" # used by emacs flycheck
BREW_ADD="$BREW_ADD sql-lint" # used by emacs flycheck
APTO_ADD="$APTO_ADD aspell-en" # used by emacs auto complete
APTO_ADD="$APTO_ADD aspell-ru" # used by emacs auto complete
APTO_ADD="$APTO_ADD emacs-el" # find/navigate elisp function source code <https://unix.stackexchange.com/questions/73100/how-to-attach-elisp-function-source-code-in-emacs>
APTO_ADD="$APTO_ADD libgnutls28-dev" # compiltime dependency <https://stackoverflow.com/questions/52722096/build-emacs-and-gnutls-not-found#60430406>

# Homebrew <https://docs.brew.sh/Homebrew-on-Linux#requirements>.
# APTO_ADD="$APTO_ADD git" # instead installed from the homebrew
APTO_ADD="$APTO_ADD build-essential"
APTO_ADD="$APTO_ADD curl"
APTO_ADD="$APTO_ADD file"
APTO_ADD="$APTO_ADD procps" # /proc file system utilities

# AppImage
# <https://github.com/appimage/appimagekit>.
# APPI_ADD="$APPI_ADD am" # annoying root requirement # appimage application manager <https://github.com/ivan-hc/am-application-manager> that <https://github.com/ivan-hc/appman> is based on
APPI_ADD="$APPI_ADD zsync2" # partial re-downloader a-la rsync/wget/curl <https://github.com/appimagecommunity/zsync2>
APTO_ADD="$APTO_ADD libfuse2" # <https://docs.appimage.org/user-guide/troubleshooting/fuse.html>

# Flatpak <https://github.com/flatpak/flatpak>.
APTO_ADD="$APTO_ADD flatpak" # PMS
APTO_ADD="$APTO_ADD gnome-software-plugin-flatpak" # Flatpak support for GNOME software
FLAT_ADD="$FLAT_ADD com.github.tchx84.Flatseal" # Is a GUI permissions manager which offers simple point-and-click permissions operations.

# # Basher is a bash/shell/functions package manager
# # <https://github.com/basherpm/basher>.
# APTO_ADD="$APTO_ADD bash"
# APTO_ADD="$APTO_ADD coreutils"

# C/C++ compile/make common dependencies.
APTO_ADD="$APTO_ADD automake" # required by tmux/xchainkeys
APTO_ADD="$APTO_ADD build-essential" # compiler?
APTO_ADD="$APTO_ADD devscripts" # ???
APTO_ADD="$APTO_ADD make" # required by all)
APTO_ADD="$APTO_ADD valgrind" # find memory leaks https://www.valgrind.org/docs/manual/quick-start.html

# Clang compiler front end for the C, C++, Objective-C (depends on LLVM).
BREW_ADD="$BREW_ADD clang-format" # APTO_ADD="$APTO_ADD clang" # used by emacs (company-clang backend) # c, c++ and objective-c compiler based on llvm <https://github.com/llvm/llvm-project>
BREW_ADD="$BREW_ADD llvm" # <https://github.com/llvm/llvm-project>

# Golang programming language.
# BREW_ADD="$BREW_ADD gcc@5" # <https://stackoverflow.com/questions/59227456/go-1-13-gcc-5-not-in-path#62795608>
# BREW_ADD="$BREW_ADD go"
# APTO_ADD="$APTO_ADD golang"
# APTO_ADD="$APTO_ADD golang-1.17-doc golang-1.17-go golang-1.17-src"
# APTO_ADD="$APTO_ADD golang-race-detector-runtime" # FIXME: where is race detector for the go 1.15?
BREW_ADD="$BREW_ADD golangci-lint" # used by emacs a-la gometalinter

# Rust programming language <https://github.com/rust-lang/rust>.
# APTO_ADD="$APTO_ADD libgtk-3-dev" # required by fontfinder https://github.com/mmstick/fontfinder
# APTO_ADD="$APTO_ADD libudev-dev" # required by fclones, is an duplicate file finder https://github.com/pkolaczk/fclones
# APTO_ADD="$APTO_ADD libwebkit2gtk-4.0-dev" # required by fontfinder https://github.com/mmstick/fontfinder
# APTO_ADD="$APTO_ADD libxcb-composite0-dev" # required by gitui a-la tig https://github.com/extrawurst/gitui
# RUST_ADD="$RUST_ADD rustfmt" # rust code pretty formating <https://github.com/rust-lang-nursery/rustfmt>
BREW_ADD="$BREW_ADD rust"

# JS/JavaScript/Nodejs.
# APTO_ADD="$APTO_ADD curl dirmngr apt-transport-https lsb-release ca-certificates" # required by nodesource.com's ppa
BREW_ADD="$BREW_ADD deno" # RUST_ADD="$RUST_ADD deno --locked" # js programming language, runtime a-la node.js <https://deno.land>, <https://github.com/denoland/deno>
BREW_ADD="$BREW_ADD node" # APTO_ADD="$APTO_ADD nodejs" # js programming language <https://github.com/nodejs/node>

# Python programming language
# <https://github.com/python/cpython>,
# <https://docs.brew.sh/Homebrew-and-Python>.
BREW_ADD="$BREW_ADD flake8" # python linter
BREW_ADD="$BREW_ADD proselint" # used/required by emacs flycheck
BREW_ADD="$BREW_ADD pylint" # used/required by emacs flycheck
BREW_ADD="$BREW_ADD python3" # APTO_ADD="$APTO_ADD python3" # provides pip (pip3) # APTO_ADD="$APTO_ADD python3-pip" # APTO_ADD="$APTO_ADD python-pip" # python 2 pip no longer supported by ubuntu

# Ruby programming language
# <https://github.com/ruby/ruby>.
# APTO_ADD="$APTO_ADD libssl1.0-dev" # required by ruby 2.3.7 (libssl1.0-dev conflicts with libssl-dev)
# APTO_ADD="$APTO_ADD libreadline-dev" # required by ruby 2.6.3
# APTO_ADD="$APTO_ADD libsqlite3-dev" # required by sqlite3 which required by mailcatcher
# APTO_ADD="$APTO_ADD libssl-dev" # required by ruby 2.6.3 (libssl-dev conflicts with libssl1.0-dev)
BREW_ADD="$BREW_ADD ruby"

# Dart programming language
# <https://github.com/dart-lang/sdk>,
# <https://dart.dev/get-dart#install-using-apt-get>.
# APTO_ADD="$APTO_ADD apt-transport-https"
# APTO_ADD="$APTO_ADD dart"
BREW_ADD="$BREW_ADD dart-sdk"

# Programming languages.
# RUST_ADD="$RUST_ADD tokei" # cloc metric (count lines of code) <https://github.com/Aaronepower/tokei>
BREW_ADD="$BREW_ADD lua" # newer than apt version # the lua programming language https://github.com/lua/lua
BREW_ADD="$BREW_ADD sbcl" # Steel Bank Common Lisp (SBCL) <https://github.com/sbcl/sbcl>
BREW_ADD="$BREW_ADD scc" # a-la sloc/cloc

# Web/HTTPd server.
# APTO_ADD="$APTO_ADD goaccess" # instead installed from the homebrew # analyze nginx/apache log in real-time
BREW_ADD="$BREW_ADD http-server" # <https://github.com/http-party/http-server>
BREW_ADD="$BREW_ADD httpd" # provides htpasswd utility is an nginx/apache basic authentication password generator # APTO_ADD="$APTO_ADD apache2-utils" # provides htpasswd utility is an nginx/apache basic authentication password generator
BREW_ADD="$BREW_ADD nginx" # web/http server a-la apache # APTO_ADD="$APTO_ADD nginx" APTO_DIS="$APTO_DIS nginx" # web/http server a-la apache

# PostgreSQL is a RDBMS a-la MySQL
# <https://github.com/postgres/postgres>,
# <https://wiki.postgresql.org/wiki/Homebrew>.
# APTO_ADD="$APTO_ADD pgcenter" # postgresql command-line tool https://github.com/lesovsky/pgcenter/releases install: dpkg --install path/to/pgcenter.deb
# APTO_ADD="$APTO_ADD postgresql-14" # APTO_DIS="$APTO_DIS postgresql" # `deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main` <https://www.postgresql.org/download/linux/ubuntu>
# APTO_ADD="$APTO_ADD postgresql-server-dev-14" # required by pg_activity is an postgresql activity monitoring <https://github.com/dalibo/pg_activity>
BREW_ADD="$BREW_ADD postgresql@14"

# MySQL Vitess.
# BREW_ADD="$BREW_ADD mysql" # rdbms
BREW_ADD="$BREW_ADD vitess" # horizontal scaled clustering <https://vitess.io/docs/contributing/build-on-macos>, <https://github.com/vitessio/vitess>, <https://en.wikipedia.org/wiki/Shard_(database_architecture)>

# MongoDB.
# APTO_ADD="$APTO_ADD gnupg" # required by mongodb <https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu>
# APTO_ADD="$APTO_ADD mongodb-org" APTO_DIS="$APTO_DIS mongod" # latest stable version of the mongodb server
BREW_ADD="$BREW_ADD mongodb-community"
BREW_ADD_SRC="$BREW_ADD_SRC mongodb/brew"

# Kafka.
BREW_ADD="$BREW_ADD kafka" # <https://github.com/apache/kafka>
BREW_ADD_SRC="$BREW_ADD_SRC redpanda-data/tap"
BREW_ADD="$BREW_ADD redpanda" # streaming data platform a-la kafka <https://github.com/redpanda-data/redpanda>

# # Manticore Search is a
# # High performance low resource consumption database for search written in C++.
# BREW_ADD="$BREW_ADD manticoresoftware/manticore/manticoresearch"
# BREW_ADD="$BREW_ADD manticoresoftware/manticore/manticore-extra"

# # Elasticsearch <https://www.elastic.co/guide/en/elasticsearch/reference/current/deb.html>.
# APTO_ADD="$APTO_ADD elasticsearch" # felix `deb https://artifacts.elastic.co/packages/5.x/apt stable main` elasticsearch 5 <https://www.elastic.co/guide/en/elasticsearch/reference/current/deb.html>, # apt-transport-https required by elasticsearch ppa <https://www.elastic.co/guide/en/elasticsearch/reference/current/deb.html#deb-repo>
# APTO_ADD="$APTO_ADD apt-transport-https"

# Databases.
BREW_ADD="$BREW_ADD keydb"
BREW_ADD="$BREW_ADD redis"
BREW_ADD="$BREW_ADD tarantool"

# Docker OS-level virtualization to deliver software in packages called containers
# <https://github.com/moby/moby>,
# <https://docs.docker.com/install/linux/docker-ce/ubuntu>.
# APTO_ADD="$APTO_ADD golang-docker-credential-helpers" # credential helper stores encrypted passwords in d-bus secret service instead of unencrypted password in plain file <https://docs.docker.com/engine/reference/commandline/login/#credentials-store>
BREW_ADD="$BREW_ADD docker" # APTO_ADD="$APTO_ADD docker-ce" APTO_DIS="docker" # `curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - && sudo add-apt-repository "deb arch=amd64 https://download.docker.com/linux/ubuntu bionic stable"`
BREW_ADD="$BREW_ADD docker-compose" # <https://github.com/docker/compose>
BREW_ADD="$BREW_ADD docker-machine" # provides docker daemon <https://docs.docker.com/desktop>

# DevOps monitoring.
# RUST_ADD="$RUST_ADD bandwhich" # bandwidth utilization tool https://github.com/imsnif/bandwhich
# RUST_ADD="$RUST_ADD diskonaut" # terminal disk space navigator https://github.com/imsnif/diskonaut
# RUST_ADD="$RUST_ADD du-dust" # show disk space usage, is an du replacement https://github.com/bootandy/dust
# RUST_ADD="$RUST_ADD procs" # list processes, is an ps replacement https://github.com/dalance/procs
BREW_ADD="$BREW_ADD btop" # a-la htop
BREW_ADD="$BREW_ADD erdtree" # disk space usage is an ncdu replacement
BREW_ADD="$BREW_ADD htop" # APTO_ADD="$APTO_ADD htop" # a-la top <https://github.com/htop-dev/htop>
BREW_ADD="$BREW_ADD ncdu" # APTO_ADD="$APTO_ADD ncdu" # disk space usage is an baobab and gt5 replacement

# # DevOps Benchmarks a-la `ab`.
# APTO_ADD="$APTO_ADD bonnie++"
# APTO_ADD="$APTO_ADD apache2-utils"
# APTO_ADD="$APTO_ADD dbench"
# APTO_ADD="$APTO_ADD siege"
# APTO_ADD="$APTO_ADD sysbench" # cpu and memory benchmarks
# APTO_ADD="$APTO_ADD tiobench" # TODO: find this package
# APTO_ADD="$APTO_ADD wrk" # c http benchmark tool <https://github.com/wg/wrk>

# DevOps.
BREW_ADD="$BREW_ADD ansible" # <https://github.com/ansible/ansible>
BREW_ADD="$BREW_ADD k9s" # derailed/k9s/k9s:, k8s/kubernetes client <https://github.com/derailed/k9s>
BREW_ADD="$BREW_ADD kubernetes-cli" # APTO_ADD="$APTO_ADD kubectl" # provides k8s/kubernetes kubectl util `deb https://apt.kubernetes.io kubernetes-xenial main` <https://kubernetes.io/docs/tasks/tools/install-kubectl> # APTO_ADD="$APTO_ADD gnupg2" # required by kubectl
BREW_ADD="$BREW_ADD netdata" # monitoring <https://github.com/netdata/netdata>
BREW_ADD="$BREW_ADD vault" # APTO_ADD="$APTO_ADD vault" # vault util (hashicorp) # curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add - && sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main", <https://vaultproject.io/downloads>

# # X11 Suckless dwm.
# # APTO_ADD="$APTO_ADD gxkb" # a-la xxkb (destroy xchainkeys)
# # APTO_ADD="$APTO_ADD rofi" # a-la dmenu for open windows
# # APTO_ADD="$APTO_ADD xfdashboard" # a-la compiz expose/gnome overview (works only with running xfce session)
# # APTO_ADD="$APTO_ADD stterm" # instead compiled from source into ~/.local/usr/local/bin # succless st terminal
# # APTO_ADD="$APTO_ADD volumeicon-alsa" # instead using i3 (i3status) # sound/volume icon indicator <https://github.com/Maato/volumeicon>
# APTO_ADD="$APTO_ADD build-essential" # suckless dependency
# APTO_ADD="$APTO_ADD i3lock" # xscreensaver replacement
# APTO_ADD="$APTO_ADD libx11-dev" # suckless dependency
# APTO_ADD="$APTO_ADD libxinerama-dev" # suckless dependency
# APTO_ADD="$APTO_ADD sharutils" # suckless dependency
# APTO_ADD="$APTO_ADD suckless-tools" # provides dmenu, slock and more
# APTO_ADD="$APTO_ADD xautolock" # used by i3lock
# APTO_ADD="$APTO_ADD xxkb" # keyboard/language layout indicator (flag) for tray

# X11 i3.
# APTO_ADD="$APTO_ADD i3status" # instead using i3blocks
# APTO_ADD="$APTO_ADD libwnck-3-dev libxklavier-dev libgtk-3-dev dh-autoreconf dh-make devscripts fakeroot" # gxkb compiltime dependency, is a keyboard/language layout indicator (flag) for tray <https://github.com/zen-tools/gxkb#building-from-source>, a-la xxkb
APTO_ADD="$APTO_ADD build-essential" # dmenu (suckless) dependency
APTO_ADD="$APTO_ADD i3-wm"
APTO_ADD="$APTO_ADD i3lock" # xscreensaver replacement
APTO_ADD="$APTO_ADD libxcb-ewmh-dev libxcb-icccm4-dev libxcb-util0-dev" # xtitle (used by i3blocks/i3) compiltime dependency <https://github.com/baskerville/xtitle>
APTO_ADD="$APTO_ADD xautolock" # used by i3lock
APTO_ADD="$APTO_ADD libxpm-dev libxt-dev xutils-dev" # xxkb compiltime dependency, is a keyboard/language layout indicator (flag) for tray <https://github.com/scientistnik/xxkb>, a-la gxkb which destroys xchainkeys

# # X11 bspwm.
# APTO_ADD="$APTO_ADD bspwm" # a-la i3

# X11 invert colors on x11/xorg/xrandr
# <https://superuser.com/questions/208746/invert-colors-on-x-or-xfce4#1494872#209083>.
APTO_ADD="$APTO_ADD libxcb-randr0-dev"
APTO_ADD="$APTO_ADD xcalib" # `xcalib -i -a` invert colors on xorg/xrandr <https://superuser.com/questions/208746/invert-colors-on-x-or-xfce4#1494872#209083>

# X11 dunst/dunstify (respects org.freedesktop.Notifications)
# <https://github.com/dunst-project/dunst>
# APTO_ADD="$APTO_ADD libc6 libcairo2 libgdk-pixbuf2.0-0 libglib2.0-0 libpango-1.0-0 libpangocairo-1.0-0 libx11-6 libxdg-basedir1 libxinerama1 libxrandr2 libxss1" # runtime dependencies
# APTO_ADD="$APTO_ADD dunst" # instead compiled from source into ~/.local/usr/local/bin # a-la notify-osd
APTO_ADD="$APTO_ADD libdbus-1-dev libnotify-dev libxrandr-dev libpango1.0-dev libx11-dev libxinerama-dev libxss-dev libglib2.0-dev libgtk-3-dev libxdg-basedir-dev" # compiltime dependency <https://github.com/dunst-project/dunst/wiki/Dependencies>

# X11 xchainkeys <https://github.com/hbekel/xchainkeys>.
APTO_ADD="$APTO_ADD automake" # xchainkeys compiltime dependency
APTO_ADD="$APTO_ADD light" # xchainkeys runtime dependency
APTO_ADD="$APTO_ADD wmctrl" # used by xchainkeys

# # X11 sxhkd.
# # APTO_ADD="$APTO_ADD sxhkd" # a-la xchainkeys
# APTO_ADD="$APTO_ADD libxcb1 libxcb-keysyms1" # sxhkd runtime dependencies
# APTO_ADD="$APTO_ADD libxcb1 libxcb-keysyms1-dev" # sxhkd compiltime dependency

# X11 volumeicon.
# APTO_ADD="$APTO_ADD intltool autogen" # volumeicon-alsa compiltime dependency
# APTO_ADD="$APTO_ADD libasound2-dev libglib2.0-dev libgtk-3-dev" # volumeicon-alsa compiltime dependency
APTO_ADD="$APTO_ADD volumeicon-alsa"

# X11 Xfce4 DE Desktop Environment.
# APPI_ADD="$APPI_ADD conky" # removed due to extra configuration # system monitoring <https://github.com/brndnmtthws/conky>
# APTO_ADD="$APTO_ADD libxfce4panel-2.0-dev libxfce4ui-2-dev" # compiltime dependency of text plugin <https://github.com/daveriesz/xfce-text-plugin>
# APTO_ADD="$APTO_ADD thunar-megasync" # not using
# APTO_ADD="$APTO_ADD xfce4-notifyd" # notifications daemon (used by dwm)
# APTO_ADD="$APTO_ADD xfdashboard" # instead installing skippy-xd
APTO_ADD="$APTO_ADD elementary-icon-theme"
APTO_ADD="$APTO_ADD elementary-xfce-icon-theme"
APTO_ADD="$APTO_ADD mousepad" # simple text editor for xfce <https://github.com/codebrainz/mousepad>
APTO_ADD="$APTO_ADD orage" # xfce date time panel plugin with calendar
APTO_ADD="$APTO_ADD thunar" # file manager
APTO_ADD="$APTO_ADD thunar-archive-plugin"
APTO_ADD="$APTO_ADD thunar-dropbox-plugin"
APTO_ADD="$APTO_ADD thunar-volman"
APTO_ADD="$APTO_ADD xfce4"
APTO_ADD="$APTO_ADD xfce4-datetime-plugin" # a-la clock panel plugin
APTO_ADD="$APTO_ADD xfce4-diskperf-plugin" # disk io performance panel plugin
APTO_ADD="$APTO_ADD xfce4-genmon-plugin" # script-based monitoring pluging a-la la/load average and temperature
APTO_ADD="$APTO_ADD xfce4-power-manager"
APTO_ADD="$APTO_ADD xfce4-screensaver"
APTO_ADD="$APTO_ADD xfce4-systemload-plugin" # system cpu/mem/net/swap load monitor
APTO_ADD="$APTO_ADD xfce4-windowck-plugin" # put maximized window title on the panel <https://github.com/takinoy/xfce4-windowck-plugin>
APTO_ADD="$APTO_ADD xfce4-xkb-plugin" # keyboard language switcher

# X11 MATE DE Desktop Environment.
# APTO_ADD="$APTO_ADD atril" # instead installed from snap # pdf viewer (remembers last page) for mate de (desktop environment) https://github.com/mate-desktop/atril
# APTO_ADD="$APTO_ADD mate"
# APTO_ADD="$APTO_ADD mate-notification-daemon"
# APTO_ADD="$APTO_ADD mate-power-manager"
# APTO_ADD="$APTO_ADD mate-screensaver"
# APTO_ADD="$APTO_ADD mate-tweak"
APTO_ADD="$APTO_ADD caja" # file manager <https://github.com/mate-desktop/caja>
APTO_ADD="$APTO_ADD engrampa" # archiver
APTO_ADD="$APTO_ADD evince-" # remove: pdf viewer remembers last page https://github.com/mate-desktop/atril
APTO_ADD="$APTO_ADD ristretto" # command line image viewer

# X11 Gnome Desktop Environment.
# APTO_ADD="$APTO_ADD chrome-gnome-shell" # chrome/gnome extension integration
# APTO_ADD="$APTO_ADD gnome-shell-extension-appindicator-" remove
# APTO_ADD="$APTO_ADD gnome-shell-extension-impatience" # speed up the gnome-shell animation speed
# APTO_ADD="$APTO_ADD gnome-shell-extension-move-clock" # move clock extension for GNOME shell
# APTO_ADD="$APTO_ADD gnome-shell-extension-ubuntu-dock-" # remove
# APTO_ADD="$APTO_ADD ubuntu-desktop-" # remove
APTO_ADD="$APTO_ADD gnome-tweaks" # former gnome-tweak-tool (in addition to gnome-control-center)

# X11 Google chrome browser
# <https://google.com/chrome>.
APPI_ADD="$APPI_ADD google-chrome" # FLAT_ADD="$FLAT_ADD com.google.Chrome" # APTO_ADD="$APTO_ADD google-chrome-stable" APTO_ADD="$APTO_ADD apt-transport-https"

# X11 Firefox browser
# <https://mozilla.org/firefox>.
APPI_ADD="$APPI_ADD firefox" # FLAT_ADD="$FLAT_ADD org.mozilla.firefox" # SNAP_ADD="$SNAP_ADD firefox" # APTO_ADD="$APTO_ADD firefox"

# # X11 never used Brave browser a-la google chrome <https://github.com/brave>.
# APTO_ADD="$APTO_ADD apt-transport-https"
# APTO_ADD="$APTO_ADD brave-browser" # a-la google chrome
# APTO_ADD="$APTO_ADD curl"
# APTO_ADD="$APTO_ADD gnupg"

# Fonts.
# APTO_ADD="$APTO_ADD font-manager" # list bitmap ??? fonts
FLAT_ADD="$FLAT_ADD com.github.fontmatrix.Fontmatrix" # <https://github.com/fontmatrix/fontmatrix>
FLAT_ADD="$FLAT_ADD io.github.mmstick.FontFinder" # <https://github.com/mmstick/fontfinder>
FLAT_ADD="$FLAT_ADD org.gnome.FontManager" # <https://github.com/fontmanager/font-manager>

# pCloud
# <https://github.com/pcloud>.
APTO_ADD="$APTO_ADD libfuse2"

# # X11 Dropbox
# # <https://github.com/dropbox>.
# APTO_ADD="$APTO_ADD dropbox"
# APTO_REM="$APTO_REM nautilus-dropbox" # conflicts with dropbox deb file

# X11 Zoom video group chat
# <https://en.wikipedia.org/wiki/Zoom_(software)>.
# APTO_ADD="$APTO_ADD libegl1-mesa libfontconfig1 libgl1-mesa-glx libglib2.0-0 libgstreamer-plugins-base1.0-0 libpulse0 libsm6 libsqlite3-0 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-shape0 libxcb-shm0 libxcb-xfixes0 libxcb-xtest0 libxcomposite1 libxi6 libxrender1 libxslt1.1" # Zoom dependencies.
# FLAT_ADD="$FLAT_ADD us.zoom.Zoom"
APPI_ADD="$APPI_ADD zoom"

# X11 Skype video group chat.
# FLAT_ADD="$FLAT_ADD com.skype.Client"
APPI_ADD="$APPI_ADD skype"

# X11 Telegram text group chat.
APPI_ADD="$APPI_ADD telegram"

# X11 mattermost text group chat a-la slack.
# FLAT_ADD="$FLAT_ADD com.mattermost.Desktop"
APPI_ADD="$APPI_ADD mattermost-desktop"

# X11/xorg/desktop.
# APTO_ADD="$APTO_ADD fonts-fantasque-sans" # instead installed manually into /usr/local/share/fonts # terminal/code/mono/programming font (gnome-terminal issue https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=960629)
# APTO_ADD="$APTO_ADD fonts-hack-ttf" # instead installed manually into /usr/local/share/fonts # terminal/code/mono/programming font
# APTO_ADD="$APTO_ADD fonts-noto" # awesome serif font ???
# APTO_ADD="$APTO_ADD libappindicator3-1" # slack dependency # libayatana-appindicator3-1 : Conflicts: libappindicator3-1 but 12.10.1+20.10.20200706.1-0ubuntu1 is to be installed
# APTO_ADD="$APTO_ADD libgdk-pixbuf2.0-dev libglib2.0-dev libxml2-utils" # compiltime dependency of numix theme
# APTO_ADD="$APTO_ADD mkusb usb-pack-efi" # use instead usb-creator-gtk # mkusb <https://help.ubuntu.com/community/mkusb#Installation> create bootable/live usb/iso <https://help.ubuntu.com/community/mkusb#Quick_start_manual_and_mkusb_PPA>
# APTO_ADD="$APTO_ADD pk-update-icon" # FIXME: missing? # display notifications about software updates
# APTO_ADD="$APTO_ADD uswsusp" # FIXME: missing? # systemctl hibernate
# APTO_ADD="$APTO_ADD xcalib" # returns: "Error - unsupported ramp size 0" (load icc/icm display color profiles (only calibration curves) <https://wiki.archlinux.org/index.php/ICC_Profiles#xcalib>)
# APTO_ADD="$APTO_ADD xclip" # tmux and xorg clipboard integration <https://github.com/tmux-plugins/tmux-yank#linux-requirements>
# APTO_REM="$APTO_REM xserver-xorg-video-intel" # instead of intel using modesetting <https://bugs.launchpad.net/ubuntu/+source/xserver-xorg-video-intel/+bug/1867668>
# BREW_ADD="$BREW_ADD duplicity" # APTO_ADD="$APTO_ADD duplicity" # backuping
APPI_ADD="$APPI_ADD flameshot" # FLAT_ADD="$FLAT_ADD org.flameshot.Flameshot" # screen shot util <https://github.com/flameshot-org/flameshot>
APPI_ADD="$APPI_ADD gimp" # FLAT_ADD="$FLAT_ADD org.gimp.GIMP" # APTO_ADD="$APTO_ADD gimp" # raster graphics editor a-la photoshop <https://github.com/gnome/gimp>
APPI_ADD="$APPI_ADD popsicle" # create bootable/live usb/iso a-la usb-creator-gtk
APTO_ADD="$APTO_ADD argyll" # load icc/icm display color profiles <https://wiki.archlinux.org/index.php/ICC_Profiles#Argyll_CMS>
APTO_ADD="$APTO_ADD blueman" # full featured bluetooth manager gui <https://wiki.archlinux.org/title/Blueman>, <https://wiki.archlinux.org/title/Bluetooth>
APTO_ADD="$APTO_ADD gparted" # format/create partition/disk/usb
APTO_ADD="$APTO_ADD libimlib2-dev libfontconfig1-dev libfreetype6-dev libx11-dev libxext-dev libxft-dev libxrender-dev zlib1g-dev libxinerama-dev libxcomposite-dev libxdamage-dev libxfixes-dev libxmu-dev" # skippy-xd is an full-screen task-switcher for X11 <https://github.com/richardgv/skippy-xd>
APTO_ADD="$APTO_ADD libnotify-bin" # a-la notify-osd
APTO_ADD="$APTO_ADD libx11-dev" # c/c++ compile/make x11 dependencies
APTO_ADD="$APTO_ADD light" # used by xchainkeys or ~/.xprofile or ~/.xstart
APTO_ADD="$APTO_ADD lxappearance" # change/switch gtk2/gtk3 themes
APTO_ADD="$APTO_ADD maim" # takes screenshots of desktop
APTO_ADD="$APTO_ADD meld" # gnome diff (gtk)
APTO_ADD="$APTO_ADD mesa-utils" # provides glxgears util for the 3d compositor testing
APTO_ADD="$APTO_ADD sassc libglib2.0-dev-bin" # dependencies of whitesur gtk theme <https://github.com/vinceliuice/whitesur-gtk-theme>, <https://github.com/vinceliuice/whitesur-icon-theme>.
APTO_ADD="$APTO_ADD transmission" # torrent client # APTO_REM="$APTO_REM transmission-gtk"
APTO_ADD="$APTO_ADD ubuntu-restricted-extras" # playing video in browser instead of download <https://askubuntu.com/questions/1122579/firefox-downloads-the-video-instead-of-playing-it#1122668>, <https://askubuntu.com/questions/56446/how-do-i-install-the-ubuntu-restricted-extras-package#56448>
APTO_ADD="$APTO_ADD usb-creator-gtk" # create bootable/live usb/iso a-la popsicle
APTO_ADD="$APTO_ADD xscreensaver-data-extra"
APTO_ADD="$APTO_ADD xscreensaver-gl-extra"
APTO_ADD="$APTO_ADD xserver-xorg-video-intel" # instead of modesetting using intel <https://bugs.launchpad.net/ubuntu/+source/xserver-xorg-video-intel/+bug/1867668>
APTO_REM="$APTO_REM gnome-mahjongg" # classic eastern tile game for gnome
APTO_REM="$APTO_REM remmina" # gtk+ remote desktop client
APTO_REM="$APTO_REM thunderbird thunderbird-gnome-support thunderbird-locale-en thunderbird-locale-en-gb thunderbird-locale-en-us thunderbird-locale-ru" # instead installed mailspring from snap # GUI mail client written in C/C++
BREW_ADD="$BREW_ADD feh" # APTO_ADD="$APTO_ADD feh" # command line image viewer
BREW_ADD="$BREW_ADD ffmpeg" # watch webcam `ffplay -fs /dev/video0` https://github.com/ffmpeg/ffmpeg
BREW_ADD="$BREW_ADD marp-cli" # markdown to presentation (pdf) from command line https://github.com/marp-team/marp
BREW_ADD="$BREW_ADD mpv" # APTO_ADD="$APTO_ADD mpv" # a-la mplayer replacement
BREW_ADD="$BREW_ADD xdotool" # ???

# Er ozn.
# BREW_ADD="$BREW_ADD openvpn" # APTO_ADD="$APTO_ADD openvpn" APTO_DIS="$APTO_DIS openvpn openvpn@client" # openvpn client <https://confluence.ozon.ru/pages/viewpage.action?spaceKey=CORPIT&title=OpenVPN+for+Linux>
BREW_ADD="$BREW_ADD go@1.19"
BREW_ADD="$BREW_ADD libxml2" # provides xmllint
BREW_ADD="$BREW_ADD postgresql@14"
BREW_ADD="$BREW_ADD redis"
BREW_ADD="$BREW_ADD vault"
APTO_ADD="$APTO_ADD libpcap-dev" # required by github.com/google/gopacket/pcap (go/src/github.com/google/gopacket/pcap/pcap_unix.go:34:10: fatal error: pcap.h: No such file or directory)
APTO_ADD="$APTO_ADD libqt5webkit5" # GlobalProtect_UI_deb-5.2.6.0-18.deb VPN dependency
APTO_ADD="$APTO_ADD libxml2-dev"

# # Er rkt.
# # APTO_ADD="$APTO_ADD glide" # german does not use glide # go/german `add-apt-repository ppa:masterminds/glide` golang glide vendor package management <https://github.com/Masterminds/glide>
# # APTO_ADD="$APTO_ADD postgresql-11" APTO_DIS="$APTO_DIS postgresql-11" # `deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main` <https://www.postgresql.org/download/linux/ubuntu>
# # APTO_ADD="$APTO_ADD postgresql-9.6" APTO_DIS="$APTO_DIS postgresql-9.6"  # felix `deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main` <https://www.postgresql.org/download/linux/ubuntu>
# # APTO_ADD="$APTO_ADD yarn" # (NOTE: before add ppa!) js package manager required by rails asset pipeline precompilation (before install add ppa <https://yarnpkg.com/lang/en/docs/install/#debian-stable>)
# BREW_ADD="$BREW_ADD docker docker-machine docker-compose" # APTO_ADD="$APTO_ADD docker-ce" APTO_DIS="$APTO_DIS docker" # `curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - && sudo add-apt-repository "deb arch=amd64 https://download.docker.com/linux/ubuntu bionic stable"`
# APTO_ADD="$APTO_ADD elasticsearch apt-transport-https" # felix `deb https://artifacts.elastic.co/packages/5.x/apt stable main` elasticsearch 5 <https://www.elastic.co/guide/en/elasticsearch/reference/current/deb.html>, # apt-transport-https required by elasticsearch ppa <https://www.elastic.co/guide/en/elasticsearch/reference/current/deb.html#deb-repo>
# APTO_ADD="$APTO_ADD golang"
# APTO_ADD="$APTO_ADD libmagickwand-dev" # required by rmagick by felix
# APTO_ADD="$APTO_ADD libpcap-dev" # required by github.com/google/gopacket/pcap (go/src/github.com/google/gopacket/pcap/pcap_unix.go:34:10: fatal error: pcap.h: No such file or directory)
# APTO_ADD="$APTO_ADD libxml2-utils" # provides xmllint
# APTO_ADD="$APTO_ADD network-manager-vpnc-gnome" # cisco vpn client plugin for the gnome
# APTO_ADD="$APTO_ADD openconnect" # vpnc/globalprotect compatible, ppa: <https://launchpad.net/~phusen/+archive/ubuntu/openconnect>
# APTO_ADD="$APTO_ADD redis" APTO_DIS="$APTO_DIS redis-server"
# APTO_ADD="$APTO_ADD redis" APTO_DIS="$APTO_DIS redis-server" # felix
# APTO_ADD="$APTO_ADD vpnc" # cisco vpn client

OPT_DRY=0

if [ "$OPT_VERBOSE" = 0 ] ; then
    RUST_UPD_CLI="$RUST_UPD_CLI --verbose"
    RUST_ADD_CLI="$RUST_ADD_CLI --verbose"
fi

# APT/deb/dpkg/apt-get/aptitude
# <https://en.wikipedia.org/wiki/APT_(software)>.
if [ "$OPT_DPKG" = 0 ] || [ "$OPT_ALL" = 0 ]; then
    OPT_DRY=-1
    sudo cat /dev/null || exit 1
    printf "Installing dpkg packages...\n\n"
    sh -c "sudo $APTO_REM_CLI $APTO_REM" || exit 1
    sh -c "sudo $APTO_ADD_CLI $APTO_ADD" || exit 1
    # sh -c "sudo $APTO_DIS_CLI $APTO_DIS" || exit 1
fi

# Homebrew
# <https://brew.sh>.
if [ "$OPT_BREW" = 0 ] || [ "$OPT_ALL" = 0 ]; then
    OPT_DRY=-1
    printf "Installing homebrew packages...\n\n"
    # for src in ${BREW_REM_SRC}; do sh -c "$BREW_REM_SRC_CLI $src" || exit 1; done
    for src in ${BREW_ADD_SRC}; do sh -c "$BREW_ADD_SRC_CLI $src" || exit 1; done
    [ -n "$BREW_ADD" ] && [ "$BREW_ADD" != " " ] && sh -c "$BREW_ADD_CLI $BREW_ADD" || exit 1
    printf "\n"
fi

# AppImage
# <https://github.com/appimage/appimagekit>.
if [ "$OPT_APPI" = 0 ] || [ "$OPT_ALL" = 0 ]; then
    OPT_DRY=-1
    printf "Installing AppImage packages...\n\n"
    [ -n "$APPI_ADD" ] && [ "$APPI_ADD" != " " ] && sh -c "$APPI_ADD_CLI $APPI_ADD"
    printf "\n"
fi

# Flatpak
# <https://github.com/flatpak/flatpak>.
if [ "$OPT_FLAT" = 0 ] || [ "$OPT_ALL" = 0 ]; then
    OPT_DRY=-1
    printf "Installing Flatpak packages...\n\n"
    [ -n "$FLAT_ADD" ] && [ "$FLAT_ADD" != " " ] && sh -c "$FLAT_ADD_CLI $FLAT_ADD" || exit 1
    printf "\n"
fi

# Rust Cargo
# <https://github.com/rust-lang/cargo>,
# <https://doc.rust-lang.org/cargo>.
if [ "$OPT_RUST" = 0 ] || [ "$OPT_ALL" = 0 ]; then
    OPT_DRY=-1
    if [ "$OPT_UPDATE" = 0 ]; then
        printf "Updating Rust Cargo packages...\n\n"
        for pkg in ${RUST_ADD}; do sh -c "$RUST_UPD_CLI $pkg" || exit 1; done
    else
        printf "Installing Rust Cargo packages...\n\n"
        for pkg in ${RUST_ADD}; do sh -c "$RUST_ADD_CLI $pkg" || exit 1; done
    fi
    printf "\n"
fi

optcfg () {
    local dir="$1"
    local usr="$2"
    git -C "$dir" rev-parse || exit 1
    if [ $(sudo git -C "$dir" status --porcelain | wc -l) = 0 ]; then
        printf "Already configured %s directory.\n" "$dir"
    else
        local IFS=$"
"
        for line in $(sudo git -C "$dir" status --porcelain); do
            local mode=$(printf "%s" "$line" | awk '{print $1}')
            local file=$(printf "%s" "$line" | awk '{print $2}')
            local desc=""
            for str in $(sudo git -C "$dir" status "$file" | grep "$file"); do
                if [ "$desc" != "" ]; then
                    desc="${desc} "
                fi
                desc="$desc"$(printf "%s" "$str" | awk '{print $1}' | sed 's/:$//')
            done
            if [ "$mode" = 'D' ]; then
                str=$(printf "Restore %s %s %s file?" "$mode" "$desc" "$file")
                while true; do
                    read -p "$str " yn
                    case $yn in
                        [Yy]* ) sudo -u "$usr" git -C "$dir" checkout "$file"; break;;
                        [Nn]* ) break;;
                        * ) echo "Please answer yes or no.";;
                    esac
                done
            elif [ "$mode" = 'M' ]; then
                str=$(printf "Restore %s %s %s file?" "$mode" "$desc" "$file")
                sudo git -C "$dir" diff "$file"
                while true; do
                    read -p "$str " yn
                    case $yn in
                        [Yy]* ) sudo -u "$usr" git -C "$dir" checkout "$file"; break;;
                        [Nn]* ) break;;
                        * ) echo "Please answer yes or no.";;
                    esac
                done
            else
                printf "Invalid %s state (%s) of %s file.\n" "$mode" "$desc" "$file"
            fi
        done
    fi
}

# $HOME user home directory
# <https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard#Directory_structure>.
if [ -n "$OPT_HOME" ] && [ "$OPT_HOME" != " " ]; then
    OPT_DRY=-1
    sudo cat /dev/null || exit 1
    printf "Configuring %s directory...\n\n" "$OPT_HOME"
    optcfg "$OPT_HOME" $(basename "$OPT_HOME")
fi

# /etc of host-specific system-wide configuration
# <https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard#Directory_structure>.
if [ "$OPT_ETCE" = 0 ] || [ "$OPT_ALL" = 0 ]; then
    OPT_DRY=-1
    sudo cat /dev/null || exit 1
    printf "Configuring /etc directory...\n\n"
    optcfg "/etc" "root"
fi

# / root directory of host-specific system-wide configuration
# <https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard#Directory_structure>.
if [ "$OPT_ROOT" = 0 ] || [ "$OPT_ALL" = 0 ]; then
    OPT_DRY=-1
    sudo cat /dev/null || exit 1
    printf "Configuring / root directory...\n\n"
    optcfg "/" "root"
fi

# Dry run.
if [ "$OPT_DRY" = 0 ]; then
    printf "$USAGE\n"
    exit 1
fi
