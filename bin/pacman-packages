#!/bin/bash

export install=${install:--1}
export depclean=${depclean:--1}

while [ $# -gt 0 ]; do
    case "$1" in
        --install)
            let install=1
            ;;
        --depclean)
            let depclean=1
            ;;
        *)
            printf "***************************\n"
            printf "* Error: Invalid argument.*\n"
            printf "***************************\n"
            exit 1
    esac
    shift
done

# Common packages.
packages="$packages emacs-nox" # community/emacs-nox
packages="$packages git" # extra/git
packages="$packages htop" # extra/htop
packages="$packages mlocate" # core/mlocate
packages="$packages sudo" # core/sudo
packages="$packages vim" # extra/vim

# Arch.
packages="$packages base-devel" # package group required to build PKGBUILD package from aur (arch user repository)
packages="$packages namcap" # extra/namcap: analysis utility that checks binary packages and source PKGBUILDs for common mistakes <https://wiki.archlinux.org/index.php/Namcap>

# Server.
packages="$packages ntp" # extra/ntp

# Golang.
packages="$packages go" # community/go

# Kubernetes/k8s.
packages="$packages docker" # community/docker
packages="$packages kubectl" # community/kubectl
# packages_aur="$packages_aur kubeadm-bin" # aur/kubeadm-bin
# packages_aur="$packages_aur kubelet-bin" # aur/kubelet-bin

packages=$(echo $packages | tr " " "\n" | sort | tr "\n" " ")

count=0
[[ $depclean -eq 1 ]] && count=$((count+1)) && pacman --remove --recursive --unneeded --verbose $(comm -23 <(pacman --query --quiet | sort) <(echo "$packages yay" | tr " " "\n" | sort))
[[ $install -eq 1 ]] && count=$((count+1)) && pacman --sync --needed --verbose $packages

# install_aur_command="yay --aur --sync --noprovides --noconfirm --verbose"

if [[ ${count} -lt 1 ]]; then
    printf "usage: pacman-packages [--install] [--depclean]\n"
fi
