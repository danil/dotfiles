#!/usr/bin/env bash

# This file is part of Danil Kutkevich <danil@kutkevich.org> home.

# Prompt powerline-go
# <https://github.com/justjanne/powerline-go>.
function wm_notify_last_command {
    local previous_command=$1
    local previous_errcode=$2
    local previous_seconds=$3
    # Interactive commands.
    case $previous_command in
        alsamixer*) return 0 ;;
        emacs*|sudo?emacs*) return 0 ;;
        git*log*|sudo?git*log*|git*rebase*|sudo?git*rebase*) return 0 ;;
        htop*|sudo?htop*) return 0 ;;
        less*|sudo?less*) return 0 ;;
        make*menuconfig*|sudo?make*menuconfig*) return 0 ;;
        tmux*|sudo?tmux) return 0 ;;
        vim*|sudo?vim*) return 0 ;;
        lftp*) return 0 ;;
        mosh*) return 0 ;;
        mongo*) return 0 ;;
    esac
    command -v dunstify >/dev/null 2>&1 || return 0
    if [[ ${previous_seconds} -lt 1 ]]; then # too fast command
        return 0
    fi
    notify_title="${previous_seconds}s" # ◷
    # <http://tldp.org/LDP/abs/html/exitcodes.html>.
    case $__ERRCODE in
        0)
            # low, normal, critical.
            my_notify_urgency="low"
            ;;
        *)
            my_notify_urgency="critical"
            notify_title="${previous_errcode}! $__DURATION" # ☢
            ;;
    esac
    dunstify --urgency=$my_notify_urgency "$notify_title" "$previous_command"
}
INTERACTIVE_BASHPID_TIMER="/tmp/${USER}.START.$$"
PS0='$(echo $SECONDS > "$INTERACTIVE_BASHPID_TIMER")'
function _update_ps1() {
    local __ERRCODE=$?
    local __DURATION=0
    if [ -e $INTERACTIVE_BASHPID_TIMER ]; then
        local __END=$SECONDS
        local __START=$(cat "$INTERACTIVE_BASHPID_TIMER")
        __DURATION="$(($__END - ${__START:-__END}))"
        rm -f "$INTERACTIVE_BASHPID_TIMER"
    fi
    # aws,cwd,docker,dotenv,exit,git,gitlite,hg,host,jobs,load,nix-shell,perlbrew,perms,root,shell-var,ssh,termtitle,time,user,venv,node
    modules=""
    modules+="venv"
    modules+=",user"
    modules+=",host"
    modules+=",ssh"
    modules+=",cwd"
    modules+=",perms"
    modules+=",git"
    modules+=",jobs"
    modules+=",exit"
    modules+=",root"
    args=()
    args+=( " -mode flat" )
    args+=( " -newline" )
    args+=( " -error $__ERRCODE" )
    args+=( " -numeric-exit-codes" )
    args+=( " -shell bash" )
    args+=( " -colorize-hostname" )
    if [[ ${__DURATION} -gt 2 ]] ; then
        modules+=",duration"
        args+=( " -duration $__DURATION" )
    fi
    args+=( " -modules ${modules[@]}" )
    PS1="$(powerline-go ${args[@]})"
    wm_notify_last_command "$previous_command" "$__ERRCODE" "$__DURATION"
}
trap 'previous_command=$this_command; this_command=$BASH_COMMAND' DEBUG
if [ "$TERM" != "linux" ]; then
    PROMPT_COMMAND="_update_ps1; $PROMPT_COMMAND"
fi
# Prompt.
function _update_ps1() {
    PS1="$(~/go/bin/powerline-go -error $?)"
}
if [ "$TERM" != "linux" ]; then
    PROMPT_COMMAND="_update_ps1; $PROMPT_COMMAND"
fi
