.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "dunst 1"
.TH dunst 1 "2021-07-25" "v1.6.1" "Dunst Reference"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
dunst \- A customizable and lightweight notification\-daemon
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
dunst [\-conf file] [\-font font] [\-geometry geom] [\-format fmt] [\-follow mode] [\-monitor n] [\-history_length n] ...
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Dunst is a highly configurable and lightweight notification daemon.
.SH "COMMAND LINE OPTIONS"
.IX Header "COMMAND LINE OPTIONS"
.IP "\fB\-h/\-\-help\fR" 4
.IX Item "-h/--help"
List all command line flags
.IP "\fB\-conf/\-config file\fR" 4
.IX Item "-conf/-config file"
Use alternative config file.
.IP "\fB\-v/\-\-version\fR" 4
.IX Item "-v/--version"
Print version information.
.IP "\fB\-print\fR" 4
.IX Item "-print"
Print notifications to stdout. This might be useful for logging, setting up
rules or using the output in other scripts.
.IP "\fB\-\fR\fI\s-1SETTING\s0\fR \fB[value]\fR" 4
.IX Item "-SETTING [value]"
Where \fI\s-1SETTING\s0\fR can be any setting that's available in the global section of
the configuration file. See \fBdunst\fR\|(5) for possible settings.
.Sp
Each configuration option in the global section can be overridden from the
command line by adding a single dash in front of it's name.
For example the font option can be overridden by running
.Sp
.Vb 1
\&    $ dunst \-font "LiberationSans Mono 4"
.Ve
.Sp
Configuration options that take boolean values can only currently be set to
\&\*(L"true\*(R" through the command line via the same method. e.g.
.Sp
.Vb 1
\&    $ dunst \-shrink
.Ve
.Sp
This is a known limitation of the way command line parameters are parsed and
will be changed in the future.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
An example configuration file is included (usually /etc/dunst/dunstrc). Note:
this was previously /usr/share/dunst/dunstrc.
Before using dunst, copy this file to ~/.config/dunst/dunstrc and edit
it accordingly. See \fBdunst\fR\|(5) for all possible settings.
.SS "NOTIFY-SEND"
.IX Subsection "NOTIFY-SEND"
dunst is able to get different colors for a message via notify-send.
In order to do that you have to add a hint via the \-h option.
The progress value can be set with a hint, too.
.IP "notify-send \-h string:fgcolor:#ff4444" 4
.IX Item "notify-send -h string:fgcolor:#ff4444"
.PD 0
.IP "notify-send \-h string:bgcolor:#4444ff \-h string:fgcolor:#ff4444 \-h string:frcolor:#44ff44" 4
.IX Item "notify-send -h string:bgcolor:#4444ff -h string:fgcolor:#ff4444 -h string:frcolor:#44ff44"
.ie n .IP "notify-send \-h int:value:42 ""Working ...""" 4
.el .IP "notify-send \-h int:value:42 ``Working ...''" 4
.IX Item "notify-send -h int:value:42 Working ..."
.PD
.SH "ACTIONS"
.IX Header "ACTIONS"
Dunst allows notifiers (i.e.: programs that send the notifications) to specify
actions. Dunst has support for both displaying indicators for these, and
interacting with these actions.
.PP
If \*(L"show_indicators\*(R" is true and a notification has an action, an \*(L"(A)\*(R" will be
prepended to the notification format. Likewise, an \*(L"(U)\*(R" is prepended to
notifications with URLs. It is possible to interact with notifications that
have actions regardless of this setting, though it may not be obvious which
notifications \s-1HAVE\s0 actions.
.PP
The \*(L"context\*(R" keybinding is used to interact with these actions, by showing a
menu of possible actions. This feature requires \*(L"dmenu\*(R" or a dmenu drop-in
replacement present. It is preferred to set this keybinding with your window
manager or desktop envirorment and let it execute \f(CW\*(C`dunsctl context\*(C'\fR. Another
option is to set this keybinding in your dunstrc, but this is soon to be deprecated
(and doesn't work on Wayland).
.PP
Alternatively, you can invoke an action with a middle click on the notification.
If there is exactly one associated action, or one is marked as default, that one
is invoked. If there are multiple, the context menu is shown. The same applies
to URLs when there are no actions. You can change the mouse button to right click
by setting \f(CW\*(C`mouse_right_click = close_all\*(C'\fR in your dunstrc.
.SH "MISCELLANEOUS"
.IX Header "MISCELLANEOUS"
Dunst can be paused via the `dunstctl set-paused true` command. To unpause dunst use
`dunstctl set-paused false`.
Alternatively you can send \s-1SIGUSR1\s0 and \s-1SIGUSR2\s0 to pause and unpause
respectively. For Example:
.IP "killall \-SIGUSR1 dunst # pause" 4
.IX Item "killall -SIGUSR1 dunst # pause"
.PD 0
.IP "killall \-SIGUSR2 dunst # resume" 4
.IX Item "killall -SIGUSR2 dunst # resume"
.PD
.PP
When paused dunst will not display any notifications but keep all notifications
in a queue.  This can for example be wrapped around a screen locker (i3lock,
slock) to prevent flickering of notifications through the lock and to read all
missed notifications after returning to the computer.
.SH "FILES"
.IX Header "FILES"
These are the places where dunst will look for a configuration file. They are
listed here in order and if dunst finds one of them, it will stop looking for
more.
.PP
\&\f(CW$XDG_CONFIG_HOME\fR/dunst/dunstrc
.PP
\&\f(CW$HOME\fR/.config/dunst/dunstrc
.PP
\&\-or\-
.PP
\&\f(CW$XDG_CONFIG_HOME\fR/dunst/dunstrc
.PP
/etc/xdg/dunst/dunstrc
.IP "/etc/dunst/dunstrc" 4
.IX Item "/etc/dunst/dunstrc"
This is where the default config file is located
.SH "AUTHORS"
.IX Header "AUTHORS"
Written by Sascha Kruse <knopwob@googlemail.com>
.SH "REPORTING BUGS"
.IX Header "REPORTING BUGS"
Bugs and suggestions should be reported on GitHub at https://github.com/dunst\-project/dunst/issues
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2013 Sascha Kruse and contributors (see \s-1LICENSE\s0 for licensing information)
.PP
If you feel that copyrights are violated, please send me an email.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBdunst\fR\|(5), \fBdunstctl\fR\|(1), \fBdwm\fR\|(1), \fBdmenu\fR\|(1), \fBtwmn\fR\|(1), \fBnotify\-send\fR\|(1)
